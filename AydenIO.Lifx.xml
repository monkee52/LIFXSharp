<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AydenIO.Lifx</name>
    </assembly>
    <members>
        <member name="T:AydenIO.Lifx.ILifxColor">
            <summary>
            Represents a generic color type.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxColor.ToHsbk">
            <summary>
            Converts a color to the LIFX HSBK representation (Hue, Saturation, Brightness, Kelvin).
            </summary>
            <returns>The HSBK representation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxColor.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <summary>
            Converts a LIFX HSBK color representation to a color.
            </summary>
            <param name="hsbk">The LIFX HSBK color.</param>
        </member>
        <member name="T:AydenIO.Lifx.ILifxHsbkColor">
            <summary>
            Represents a LIFX HSBK color type.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHsbkColor.Hue">
            <summary>
            Gets or sets the hue of the color, between 0 and 65535.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHsbkColor.Saturation">
            <summary>
            Gets or sets the saturation of the color, between 0 and 65535.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHsbkColor.Brightness">
            <summary>
            Gets or sets the brightness of the color, between 0 and 65535.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHsbkColor.Kelvin">
            <summary>
            Gets or sets the color temperature of the color, between a minimum and maximum kelvin depending on the device.
            Only affects actual color output when <see cref="P:AydenIO.Lifx.ILifxHsbkColor.Saturation"/> is low.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxHsbkColor">
            <summary>
            Basic implementation of <see cref="T:AydenIO.Lifx.ILifxHsbkColor"/>.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxHsbkColor.Hue">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxHsbkColor.Saturation">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxHsbkColor.Brightness">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxHsbkColor.Kelvin">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxHsbkColor.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxHsbkColor.ToHsbk">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxHsbkColorComparer">
            <summary>
            Compares <c>ILifxHsbkColor</c>s.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxHsbkColorComparer.Instance">
            <summary>Gets the default instance of <see cref="T:AydenIO.Lifx.LifxHsbkColorComparer"/>.</summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxHsbkColorComparer.GetHashCode(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxHsbkColorComparer.Equals(AydenIO.Lifx.ILifxHsbkColor,AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxRgbColor">
            <summary>
            Represents an RGB color.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor.Red">
            <summary>Gets or sets the red value for the color.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor.Green">
            <summary>Gets or sets the green value for the color.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor.Blue">
            <summary>Gets or sets the blue value for the color.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor.Kelvin">
            <summary>Gets or sets the kelvin value for the color.</summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxRgbColor.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxRgbColor.ToHsbk">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxRgbColor16Bit">
            <summary>
            Represents an RGB color with 16-bits of precision per channel.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor16Bit.Red">
            <summary>Gets or sets the red value for the color.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor16Bit.Green">
            <summary>Gets or sets the green value for the color.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor16Bit.Blue">
            <summary>Gets or sets the blue value for the color.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor16Bit.Kelvin">
            <summary>Gets or sets the kelvin value for the color.</summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxRgbColor16Bit.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxRgbColor16Bit.ToHsbk">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.EquatableWeakReference`1">
            <summary>
            Creates a weak reference that can be compared for equality.
            </summary>
            <typeparam name="T">The weak reference type.</typeparam>
        </member>
        <member name="M:AydenIO.Lifx.EquatableWeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.EquatableWeakReference`1"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="P:AydenIO.Lifx.EquatableWeakReference`1.Target">
            <summary>Gets or sets the object (the target) referenced by the current <see cref="T:AydenIO.Lifx.EquatableWeakReference`1"/> object.</summary>
        </member>
        <member name="P:AydenIO.Lifx.EquatableWeakReference`1.IsAlive">
            <summary>Gets a value indicating whether the object referenced by the current <see cref="T:AydenIO.Lifx.EquatableWeakReference`1"/> object has been garbage collected.</summary>
        </member>
        <member name="M:AydenIO.Lifx.EquatableWeakReference`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.EquatableWeakReference`1.TryGetTarget(`0@)">
            <summary>
            Tries to retrieve the target object that is referenced by the current <see cref="T:AydenIO.Lifx.EquatableWeakReference`1"/> object.
            </summary>
            <param name="target">Contains the target object, if initialized.</param>
            <returns>Whether the <paramref name="target"/> points to an alive object.</returns>
        </member>
        <member name="M:AydenIO.Lifx.EquatableWeakReference`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.EquatableWeakReference`1.Equals(AydenIO.Lifx.EquatableWeakReference{`0})">
            <summary>
            Determines whether the specified <see cref="T:AydenIO.Lifx.EquatableWeakReference`1"/> is equal to the curent <see cref="T:AydenIO.Lifx.EquatableWeakReference`1"/>.
            </summary>
            <param name="other">The other <see cref="T:AydenIO.Lifx.EquatableWeakReference`1"/> to compare the reference too.</param>
            <returns><c>true</c> if the specified <see cref="T:AydenIO.Lifx.EquatableWeakReference`1"/> <paramref name="other"/> is equal to the current <see cref="T:AydenIO.Lifx.EquatableWeakReference`1"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:AydenIO.Lifx.EquatableWeakReference`1.Equals(`0)">
            <summary>
            Determines whether the specified <c>T</c> is equal to the curent <see cref="P:AydenIO.Lifx.EquatableWeakReference`1.Target"/>.
            </summary>
            <param name="other">The other <typeparamref name="T"/> to compare the reference too.</param>
            <returns><c>true</c> if the specified <typeparamref name="T"/> <paramref name="other"/> is equal to the current <see cref="P:AydenIO.Lifx.EquatableWeakReference`1.Target"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:AydenIO.Lifx.ILifxDevice">
            <summary>
            Represents a LIFX device.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxDevice.MacAddress">
            <summary>Gets the MAC address of the device. Used as the primary identifier for the device.</summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetServices(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of the services that the device supports.
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A list of services supported by the device.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetHostInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets host info.
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The host info.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetHostFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets host firmware.
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The host firmware.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetWifiInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the wifi info.
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The wifi info.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetWifiFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the wifi firmware.
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The wifi firmware.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetPower(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device power state.
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The device power state.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.SetPower(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the device power state.
            </summary>
            <param name="power">The power state.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.PowerOn(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Powers on the device.
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.PowerOff(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Powers off the device.
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetLabel(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device label.
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The device label.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.SetLabel(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the device label.
            </summary>
            <param name="label">The device label.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetVersion(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device version.
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The device version.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device info.
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The device info.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetLocation(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device location.
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The device location.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.SetLocation(AydenIO.Lifx.ILifxLocationTag,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the device location.
            </summary>
            <param name="location">The location.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetGroup(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device group.
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The device group.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.SetGroup(AydenIO.Lifx.ILifxGroupTag,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the device group.
            </summary>
            <param name="group">The group.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:AydenIO.Lifx.ILifxGroup">
            <summary>
            A collection of <see cref="T:AydenIO.Lifx.ILifxDevice"/>s sharing a common <see cref="T:AydenIO.Lifx.ILifxGroupTag"/>.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxGroupCollection">
            <summary>
            A collection for <see cref="T:AydenIO.Lifx.ILifxGroup"/>s.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxInfraredLight">
            <summary>
            Represents a LIFX light device with infrared.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxInfraredLight.GetInfrared(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the light's infrared state.
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The light's infrared state.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxInfraredLight.SetInfrared(System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's infrared state.
            </summary>
            <param name="level">The brightness level of the infrared component.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:AydenIO.Lifx.ILifxLight">
            <summary>
            Represents a LIFX light device.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.GetState(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the light's state.
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The light's state.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's effect waveform.
            </summary>
            <param name="transient">True if the color is temporary, otherwise effect ends with light being the color.</param>
            <param name="color">The color of the effect.</param>
            <param name="period">Duration of a cycle.</param>
            <param name="cycles">Number of cycles.</param>
            <param name="skewRatio">Waveform skew.</param>
            <param name="waveform">Waveform to use for the effect.</param>
            <param name="rapid">Whether an acknowledgement is required.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's effect waveform.
            </summary>
            <param name="transient">True if the color is temporary, otherwise effect ends with light being the color.</param>
            <param name="color">The color of the effect.</param>
            <param name="periodMs">Duration of a cycle, in milliseconds.</param>
            <param name="cycles">Number of cycles.</param>
            <param name="skewRatio">Waveform skew.</param>
            <param name="waveform">Waveform to use for the effect.</param>
            <param name="rapid">Whether an acknowledgement is required.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's effect waveform.
            </summary>
            <param name="transient">True if the color is temporary, otherwise effect ends with light being the color.</param>
            <param name="color">The color of the effect.</param>
            <param name="period">Duration of a cycle.</param>
            <param name="cycles">Number of cycles.</param>
            <param name="skewRatio">Waveform skew.</param>
            <param name="waveform">Waveform to use for the effect.</param>
            <param name="setHue">Whether to use the hue value for the color.</param>
            <param name="setSaturation">Whether to use the saturation value for the color.</param>
            <param name="setBrightness">Whether to use the brightness value for the color.</param>
            <param name="setKelvin">Whether to use the kelvin value for the color.</param>
            <param name="rapid">Whether an acknowledgement is required.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's effect waveform.
            </summary>
            <param name="transient">True if the color is temporary, otherwise effect ends with light being the color.</param>
            <param name="color">The color of the effect.</param>
            <param name="periodMs">Duration of a cycle, in milliseconds.</param>
            <param name="cycles">Number of cycles.</param>
            <param name="skewRatio">Waveform skew.</param>
            <param name="waveform">Waveform to use for the effect.</param>
            <param name="setHue">Whether to use the hue value for the color.</param>
            <param name="setSaturation">Whether to use the saturation value for the color.</param>
            <param name="setBrightness">Whether to use the brightness value for the color.</param>
            <param name="setKelvin">Whether to use the kelvin value for the color.</param>
            <param name="rapid">Whether an acknowledgement is required.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetPower(System.Boolean,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's power state.
            </summary>
            <param name="power">The power state.</param>
            <param name="duration">How long to transition over.</param>
            <param name="rapid">Whether an acknowledgement is required.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetPower(System.Boolean,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's power state.
            </summary>
            <param name="power">The power state.</param>
            <param name="durationMs">How long to transition over, in milliseconds.</param>
            <param name="rapid">Whether an acknowledgement is required.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetColor(AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's color.
            </summary>
            <param name="color">The color.</param>
            <param name="duration">How long to transition over.</param>
            <param name="rapid">Whether an acknowledgement is required.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetColor(AydenIO.Lifx.ILifxColor,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's color.
            </summary>
            <param name="color">The color.</param>
            <param name="durationMs">How long to transition over, in milliseconds.</param>
            <param name="rapid">Whether an acknowledgement is required.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:AydenIO.Lifx.ILifxLocation">
            <summary>
            A collection of <c>ILifxLocation</c>s.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxLocationCollection">
            <summary>
            A collection of <see cref="T:AydenIO.Lifx.ILifxLocation"/>s.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxMembership`1">
            <summary>
            A collection of LIFX devices belonging to a "group".
            </summary>
            <typeparam name="TTag">The membership tag type.</typeparam>
        </member>
        <member name="E:AydenIO.Lifx.ILifxMembership`1.DeviceAdded">
            <summary>
            Invoked whenever a new device has been added
            </summary>
        </member>
        <member name="E:AydenIO.Lifx.ILifxMembership`1.DeviceRemoved">
            <summary>
            Invoked whenever a device has been removed
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxMembership`1.DeviceCount">
            <summary>Gets the number of devices that are part of this group.</summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxMembership`1.Rename(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Renames the membership information, and informs all devices known as part of the collection.
            </summary>
            <param name="newLabel">The new label for the collection.</param>
            <param name="timeoutMs">How long before the call takes before the responses are returned.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:System.AggregateException">Thrown when a sub-task times out, or the operation is cancelled by the user.</exception>
        </member>
        <member name="T:AydenIO.Lifx.ILifxMembershipCollection`2">
            <summary>
            A manager that holds all collections for a given "group" type.
            </summary>
            <typeparam name="TMembership">The collection's type.</typeparam>
            <typeparam name="TTag">The collection's membership information type as known to devices.</typeparam>
        </member>
        <member name="E:AydenIO.Lifx.ILifxMembershipCollection`2.CollectionCreated">
            <summary>
            Invoked whenever a new collection has been created
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxMembershipCollection`2.GetGrouping(System.Guid)">
            <summary>
            Gets the membership collection given an identifier.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>The collection, or null if not found.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxMembershipCollection`2.GetGrouping(System.Guid,System.String)">
            <summary>
            Gets the membership collection given an identifier, and creates it if it does not exist.
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="label">The label to use if creating the collection.</param>
            <returns>The collection.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxMembershipCollection`2.GetGrouping(AydenIO.Lifx.ILifxMembershipTag)">
            <summary>
            Gets the membership collection given a "group" type.
            </summary>
            <param name="membership">The "group".</param>
            <returns>The collection.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxMembershipCollection`2.GetGrouping(System.String)">
            <summary>
            Gets the membership collection given a label.
            </summary>
            <param name="label">The label to search for.</param>
            <returns>The collection, or null if not found.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxMembershipCollection`2.Create(System.String)">
            <summary>
            Creates a membership collection with a given label.
            </summary>
            <param name="label">The label to create the new collection with.</param>
            <returns>The new collection.</returns>
        </member>
        <member name="T:AydenIO.Lifx.ILifxMembershipCreatedEventArgs`2">
            <summary>
            The event arguments interface for when a collection of <see cref="T:AydenIO.Lifx.ILifxDevice"/>s is created.
            Needed for covariance.
            </summary>
            <typeparam name="TMembership">The collection's type.</typeparam>
            <typeparam name="TTag">The collection's type's tag.</typeparam>
        </member>
        <member name="P:AydenIO.Lifx.ILifxMembershipCreatedEventArgs`2.Collection">
            <summary>Gets the <typeparamref name="TMembership"/> collection.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxMultizoneLight">
            <summary>
            Represents a LIFX multizone light device.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxProduct">
            <summary>
            Represents features of a device
            .</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.VendorId">
            <summary>Gets the vendor ID.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.VendorName">
            <summary>Gets the vendor name.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.ProductId">
            <summary>Gets the product ID.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.ProductName">
            <summary>Gets the device product name.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.SupportsColor">
            <summary>Gets a value indicating whether the device supports color.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.SupportsInfrared">
            <summary>Gets a value indicating whether the device supports infrared.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.IsMultizone">
            <summary>Gets a value indicating whether the device is a multizone device.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.IsChain">
            <summary>Gets a value indicating whether the device is a chained device.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.IsMatrix">
            <summary>Gets a value indicating whether the device is a matrix device.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.MinKelvin">
            <summary>Gets the minimum kelvin value for the device.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.MaxKelvin">
            <summary>Gets the maximum kelvin value for the device.</summary>
        </member>
        <member name="T:AydenIO.Lifx.IResponseAwaiter">
            <summary>
            Allows response(s) to be handled when received on the socket.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.IResponseAwaiter.Task">
            <summary>Gets the awaitable task.</summary>
        </member>
        <member name="M:AydenIO.Lifx.IResponseAwaiter.HandleResponse(AydenIO.Lifx.Response{AydenIO.Lifx.LifxMessage})">
            <summary>
            Called whenever a response is received.
            </summary>
            <param name="response">The response that was received.</param>
        </member>
        <member name="M:AydenIO.Lifx.IResponseAwaiter.HandleException(System.Exception)">
            <summary>
            Called whenever an exception is generated while waiting for a response.
            </summary>
            <param name="exception">The exception that was generated.</param>
        </member>
        <member name="T:AydenIO.Lifx.LifxApplicationRequest">
            <summary>
            Controls how/when multizone devices apply color changes.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxApplicationRequest.NoApply">
            <summary>Don't apply the requested changes until a message with Apply or ApplyOnly is sent</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxApplicationRequest.Apply">
            <summary>Apply the changes immediately and apply any pending changes.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxApplicationRequest.ApplyOnly">
            <summary>Ignore the requested changes in this message and only apply pending changes.</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxDevice">
            <summary>
            Represents a LIFX device.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress,System.Net.IPEndPoint,AydenIO.Lifx.ILifxVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxDevice"/> class.
            </summary>
            <param name="lifx">The <c>LifxNetwork</c> the device belongs to.</param>
            <param name="macAddress">The MAC address of the device.</param>
            <param name="endPoint">The <c>IPEndPoint</c> of the device.</param>
            <param name="version">The version of the device.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.VendorId">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.VendorName">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.ProductId">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.ProductName">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.SupportsColor">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.SupportsInfrared">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.IsMultizone">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.IsChain">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.IsMatrix">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.MinKelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.MaxKelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.EndPoint">
            .<summary>Gets the <c>IPEndPoint</c> of the device.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.MacAddress">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.LastSeen">
            .<summary>Gets the last time the device was seen by discovery.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.Lifx">
            <summary>Gets the associated <c>LifxNetwork</c> for the device.</summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetServices(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetHostInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetHostFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetWifiInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetWifiFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetPower(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.SetPower(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.PowerOn(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.PowerOff(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetLabel(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.SetLabel(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetVersion(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetLocation(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.SetLocation(AydenIO.Lifx.ILifxLocationTag,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetGroup(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.SetGroup(AydenIO.Lifx.ILifxGroupTag,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.Ping(System.Collections.Generic.IEnumerable{System.Byte},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Request a device to echo back a specific payload.
            </summary>
            <param name="payload">The payload to be echoed.</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>Whether the device responded, and whether the response matched the payload.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.Ping(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Request a device to echo back a random payload.
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>Whether the device responded, and whether the response matched the payload.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.SetHostFirmwareCachedValue(AydenIO.Lifx.ILifxHostFirmware)">
            <summary>
            Sets the internal cached value for host firmware. Used when different firmware versions have different APIs.
            </summary>
            <param name="hostFirmware">The host firmware for the device.</param>
        </member>
        <member name="T:AydenIO.Lifx.LifxDeviceAddedEventArgs">
            <summary>
            Event arguments for when a device has been added to a collection.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxDeviceAddedEventArgs.#ctor(AydenIO.Lifx.ILifxDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxDeviceAddedEventArgs"/> class.
            </summary>
            <param name="device">The added <see cref="T:AydenIO.Lifx.ILifxDevice"/>.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxDeviceAddedEventArgs.Device">
            <summary>Gets the added <see cref="T:AydenIO.Lifx.ILifxDevice"/>.</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxDeviceDiscoveredEventArgs">
            <summary>
            Event arguments for when a device is discovered.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxDeviceDiscoveredEventArgs.#ctor(AydenIO.Lifx.ILifxDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxDeviceDiscoveredEventArgs"/> class.
            </summary>
            <param name="device">The discovered <see cref="T:AydenIO.Lifx.ILifxDevice"/>.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxDeviceDiscoveredEventArgs.Device">
            <summary>Gets the added <see cref="T:AydenIO.Lifx.ILifxDevice"/>.</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxDeviceLostEventArgs">
            <summary>
            Event arguments for when a device has been lost.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxDeviceLostEventArgs.#ctor(AydenIO.Lifx.MacAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxDeviceLostEventArgs"/> class.
            </summary>
            <param name="macAddress">The <see cref="T:AydenIO.Lifx.MacAddress"/> of the lost device.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxDeviceLostEventArgs.MacAddress">
            <summary>Gets the MAC address of the device that has been lost.</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxDeviceRemovedEventArgs">
            <summary>
            Event arguments for when a device is removed from a collection.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxDeviceRemovedEventArgs.#ctor(AydenIO.Lifx.ILifxDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxDeviceRemovedEventArgs"/> class.
            </summary>
            <param name="device">The removed <see cref="T:AydenIO.Lifx.ILifxDevice"/>.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxDeviceRemovedEventArgs.Device">
            <summary>Gets the device that was removed.</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxExtendedMultizoneLight">
            <summary>
            Represents a multizone light that supports the extended API.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxExtendedMultizoneLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress,System.Net.IPEndPoint,AydenIO.Lifx.ILifxVersion,AydenIO.Lifx.ILifxHostFirmware)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxExtendedMultizoneLight"/> class.
            </summary>
            <param name="lifx">The <see cref="T:AydenIO.Lifx.LifxNetwork"/> that the device belongs to.</param>
            <param name="macAddress">The <see cref="T:AydenIO.Lifx.MacAddress"/> of the device.</param>
            <param name="endPoint">The <see cref="T:System.Net.IPEndPoint"/> of the device.</param>
            <param name="version">The <see cref="T:AydenIO.Lifx.ILifxVersion"/> of the device.</param>
            <param name="hostFirmware">The <see cref="T:AydenIO.Lifx.ILifxHostFirmware"/> of the device.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxExtendedMultizoneLight.GetMultizoneState(System.UInt16,System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxExtendedMultizoneLight.SetMultizoneState(AydenIO.Lifx.LifxApplicationRequest,System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.TimeSpan,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxExtendedMultizoneLight.SetMultizoneState(System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxGroup">
            <summary>
            A collection of devices belong to a LIFX group.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxGroup.#ctor(System.Guid,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxGroup"/> class.
            </summary>
            <param name="guid">The identifier of the group.</param>
            <param name="label">The label for the group.</param>
            <param name="updatedAt">When the group was last updated.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxGroup.Group">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxGroup.RenameDeviceMembership(AydenIO.Lifx.ILifxDevice,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxGroupCollection">
            <summary>
            Manages groups known to the <see cref="T:AydenIO.Lifx.LifxNetwork"/>.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxGroupCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxGroupCollection"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxGroupCollection.CreateCollection(System.Guid,System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxInfraredLight">
            <summary>
            Represents a LIFX light device with infrared.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxInfraredLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress,System.Net.IPEndPoint,AydenIO.Lifx.ILifxVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxInfraredLight"/> class.
            </summary>
            <param name="lifx">The <see cref="T:AydenIO.Lifx.LifxNetwork"/> that the device belongs to.</param>
            <param name="macAddress">The <see cref="T:AydenIO.Lifx.MacAddress"/> of the device.</param>
            <param name="endPoint">The <see cref="T:System.Net.IPEndPoint"/> of the device.</param>
            <param name="version">The <see cref="T:AydenIO.Lifx.ILifxVersion"/> of the device.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxInfraredLight.GetInfrared(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxInfraredLight.SetInfrared(System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxLight">
            <summary>
            Represents a LIFX light device.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress,System.Net.IPEndPoint,AydenIO.Lifx.ILifxVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxLight"/> class.
            </summary>
            <param name="lifx">The <see cref="T:AydenIO.Lifx.LifxNetwork"/> that the device belongs to.</param>
            <param name="macAddress">The <see cref="T:AydenIO.Lifx.MacAddress"/> of the device.</param>
            <param name="endPoint">The <see cref="T:System.Net.IPEndPoint"/> of the device.</param>
            <param name="version">The <see cref="T:AydenIO.Lifx.ILifxVersion"/> of the device.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.GetState(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.GetPower(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetPower(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetPower(System.Boolean,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetPower(System.Boolean,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetColor(AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetColor(AydenIO.Lifx.ILifxColor,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxLocation">
            <summary>
            A collection of devices belong to a LIFX location.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxLocation.#ctor(System.Guid,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxLocation"/> class.
            </summary>
            <param name="guid">The identifier of the location.</param>
            <param name="label">The label for the location.</param>
            <param name="updatedAt">When the location was last updated.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxLocation.Location">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLocation.RenameDeviceMembership(AydenIO.Lifx.ILifxDevice,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxLocationCollection">
            <summary>
            Manages locations known to the <see cref="T:AydenIO.Lifx.LifxNetwork"/>.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxLocationCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxLocationCollection"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxLocationCollection.CreateCollection(System.Guid,System.String,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxMessage">
            <summary>
            Represents a LIFX protocol message.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxMessage.#ctor(AydenIO.Lifx.LifxMessageType)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxMessage"/> class.
            </summary>
            <param name="type">The <see cref="T:AydenIO.Lifx.LifxMessageType"/> that this represents.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxMessage.SourceId">
            <summary>Gets or sets the source identifier.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxMessage.SequenceNumber">
            <summary>Gets or sets the sequence identifier.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxMessage.Target">
            <summary>Gets or sets the target <see cref="T:AydenIO.Lifx.MacAddress"/>.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxMessage.ResponseFlags">
            <summary>Gets or sets the response flags.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxMessage.Type">
            <summary>Gets the type of the message.</summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxMessage.GetBytes">
            <summary>
            Gets the packet as a sequence of bytes.
            </summary>
            <returns>The bytes that represent this packet at the time of the call.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxMessage.FromBytes(System.Byte[])">
            <summary>
            Sets the properties of the packet from a sequence of bytes.
            </summary>
            <param name="bytes">The bytes that contain the packet.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxMessage.WritePayload(System.IO.BinaryWriter)">
            <summary>
            Writes the payload as a sequence of bytes.
            </summary>
            <param name="writer">A <see cref="T:System.IO.BinaryWriter"/> to write the payload into.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxMessage.ReadPayload(System.IO.BinaryReader)">
            <summary>
            Reads the payload into the properties of this packet.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> to read the bytes from.</param>
        </member>
        <member name="T:AydenIO.Lifx.LifxMessageType">
            <summary>
            Possible message types for the LIFX protocol.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.Unknown">
            <summary>A message that hasn't been decoded yet. Used to prevent the <see cref="M:AydenIO.Lifx.LifxMessage.FromBytes(System.Byte[])"/> method from throwing an <see cref="T:System.IO.InvalidDataException"/> during decoding</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetService">
            <summary>Sent by a client to acquire responses from all devices on the local network.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateService">
            <summary>Provides the device Service and port.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetHostInfo">
            <summary>Get Host MCU information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateHostInfo">
            <summary>Response to GetHostInfo message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetHostFirmware">
            <summary>Gets Host MCU firmware information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateHostFirmware">
            <summary>Response to GetHostFirmware message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetWifiInfo">
            <summary>Get Wifi subsystem information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateWifiInfo">
            <summary>Response to GetWifiInfo message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetWifiFirmware">
            <summary>Get Wifi subsystem firmware.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateWifiFirmware">
            <summary>Response to GetWifiFirmware message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetPower">
            <summary>Get device power level.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetPower">
            <summary>Set device power level. </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StatePower">
            <summary>Response to GetPower message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetLabel">
            <summary>Get device label.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetLabel">
            <summary>Set the device label text.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateLabel">
            <summary>Response to GetLabel message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetVersion">
            <summary>Get the hardware version.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateVersion">
            <summary>Provides the hardware version of the device.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetInfo">
            <summary>Get run-time information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateInfo">
            <summary>Response to GetInfo message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.Acknowledgement">
            <summary>Response to any message sent with _ack_required_ set to 1.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetLocation">
            <summary>Ask the bulb to return its location information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetLocation">
            <summary>Set the device location.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateLocation">
            <summary>Device location.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetGroup">
            <summary>Ask the bulb to return its group membership information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetGroup">
            <summary>Set the device group.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateGroup">
            <summary>Device group.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.EchoRequest">
            <summary>Request an arbitrary payload be echoed back.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.EchoResponse">
            <summary>Response to EchoRequest message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightGet">
            <summary>Sent by a client to obtain the light state.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightSetColor">
            <summary>Sent by a client to change the light state.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightSetWaveform">
            <summary>Apply an effect to the bulb.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightSetWaveformOptional">
            <summary>Optionally set effect parameters. Same as SetWaveform but allows some parameters to be set from the current value on device.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightState">
            <summary>Sent by a device to provide the current light state.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightGetPower">
            <summary>Sent by a client to obtain the power level.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightSetPower">
            <summary>Sent by a client to change the light power level.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightStatePower">
            <summary>Sent by a device to provide the current power level.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightGetInfrared">
            <summary>Gets the current maximum power level of the Infrared channel.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightStateInfrared">
            <summary>This message is returned from a GetInfrared message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightSetInfrared">
            <summary>Send this message to alter the current maximum brightness for the infrared channel.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetExtendedColorZones">
            <summary>This messages lets you change all the zones on your device in one message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetExtendedColorZones">
            <summary>This message will ask the device to return a StateExtendedColorZones containing all of it's colors.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateExtendedColorZones">
            <summary>Returned after you send the device a GetExtendedColorZones or SetExtendedColorZones message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetColorZones">
            <summary>This message is used for changing the color of either a single or multiple zones.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetColorZones">
            <summary>GetColorZones is used to request the zone colors for a range of zones.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateZone">
            <summary>The StateZone message represents the state of a single zone.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateMultiZone">
            <summary>The StateMultiZone message represents the state of eight consecutive zones in a single message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetDeviceChain">
            <summary>This message returns information about the tiles in the chain.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateDeviceChain">
            <summary>Response to GetDeviceChain</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetUserPosition">
            <summary>Used to tell each tile what their position is.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetTileState64">
            <summary>Get the state of 64 pixels in the tile in a rectangle that has a starting point and width.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateTileState64">
            <summary>Returned from a GetTileState64 and provides all the pixels in the specified rectangle for that tile.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetTileState64">
            <summary>This lets you set 64 pixels.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetMultiZoneEffect">
            <summary>This messages lets you control a firmware effect on your device.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetMultiZoneEffect">
            <summary>Asks the device to return a StateMultiZoneEffect to tell you the current state of firmware effects on the device</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateMultiZoneEffect">
            <summary>This has the same fields as a SetMultiZoneEffect and is returned from a GetMultiZoneEffect or a SetMultiZoneEffect.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetTileEffect">
            <summary>This messages lets you control a firmware effect on your LIFX Tile.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetTileEffect">
            <summary>Asks the device to return a StateMultiZoneEffect to tell you the current state of firmware effects on the device.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateTileEffect">
            <summary>It describes the current state of the effects on the device.</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxMultizoneLight">
            <summary>
            Represents a multizone lifx light.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxMultizoneLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress,System.Net.IPEndPoint,AydenIO.Lifx.ILifxVersion,AydenIO.Lifx.ILifxHostFirmware)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxMultizoneLight"/> class.
            </summary>
            <param name="lifx">The <see cref="T:AydenIO.Lifx.LifxNetwork"/> that the device belongs to.</param>
            <param name="macAddress">The <see cref="T:AydenIO.Lifx.MacAddress"/> of the device.</param>
            <param name="endPoint">The <see cref="T:System.Net.IPEndPoint"/> of the device.</param>
            <param name="version">The <see cref="T:AydenIO.Lifx.ILifxVersion"/> of the device.</param>
            <param name="hostFirmware">The <see cref="T:AydenIO.Lifx.ILifxHostFirmware"/> of the device.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxMultizoneLight.GetMultizoneState(System.UInt16,System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxMultizoneLight.SetMultizoneState(AydenIO.Lifx.LifxApplicationRequest,System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.UInt32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxMultizoneLight.SetMultizoneState(System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxMultizoneLight.SetMultizoneState(AydenIO.Lifx.LifxApplicationRequest,System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.TimeSpan,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxMultizoneLight.SetMultizoneState(System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxNetwork">
            <summary>
            Common class that connects C# to the LIFX protocol.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxNetwork.LifxPort">
            <summary>
            The default LIFX LAN protocol port.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxNetwork.LifxBroadcast">
            <summary>Gets the default broadcast target.</summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxNetwork"/> class.
            </summary>
            <param name="discoveryInterval">The default <see cref="P:AydenIO.Lifx.LifxNetwork.DiscoveryInterval" />.</param>
            <param name="rxTimeout">The default <see cref="P:AydenIO.Lifx.LifxNetwork.ReceiveTimeout" />.</param>
        </member>
        <member name="E:AydenIO.Lifx.LifxNetwork.DeviceDiscovered">
            <summary>
            Event handler for when a device has been discovered during discovery
            </summary>
        </member>
        <member name="E:AydenIO.Lifx.LifxNetwork.DeviceLost">
            <summary>
            Event handler for when a device hasn't been seen for a while during discovery
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxNetwork.SourceId">
            <summary>Gets the identifier used to distinguish this <see cref="T:AydenIO.Lifx.LifxNetwork"/> from others in the protocol.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxNetwork.DiscoveryInterval">
            <summary>Gets or sets how long to wait between sending out discovery packets.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxNetwork.ReceiveTimeout">
            <summary>Gets or sets the default time to wait before a call times out, in milliseconds.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxNetwork.Locations">
            <summary>Gets the location manager for the network.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxNetwork.Groups">
            <summary>Gets the group manager for the network.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxNetwork.Devices">
            <summary>Gets a list of all devices that have been discovered, or explicitly found.</summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.GetFeaturesForProduct(AydenIO.Lifx.ILifxVersion)">
            <summary>
            Gets the features supported by a device, given a vendor and product ID.
            </summary>
            <param name="version">The LIFX version.</param>
            <returns>An object containing the supported features for that product.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.ProductSupportsExtendedMultizoneApi(AydenIO.Lifx.ILifxVersion,AydenIO.Lifx.ILifxHostFirmware)">
            <summary>
            Gets whether a device supports the extended multizone API.
            </summary>
            <param name="version">The LIFX device's version.</param>
            <param name="hostFirmware">The LIFX device's host firmware.</param>
            <returns>Whether the product supports the extended multizone API.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.StartDiscovery">
            <summary>
            Starts the discovery thread.
            </summary>
            <returns>True if the call started the thread, otherwise the thread was not in a state to start.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.StopDiscovery">
            <summary>
            Stops the discovery thread.
            </summary>
            <returns>True if the call stopped the thread, otherwise the thread was not in a state to stop.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.DiscoverOnce(System.Threading.CancellationToken)">
            <summary>
            Sends a single discovery packet.
            </summary>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.HasDevice(AydenIO.Lifx.MacAddress)">
            <summary>
            Returns whether a given MAC address has been found, and is a device.
            </summary>
            <param name="macAddress">The MAC address to look up.</param>
            <returns>Whether the device has been found.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.GetDevice(AydenIO.Lifx.MacAddress,System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a device with a specific <see cref="T:AydenIO.Lifx.MacAddress"/>.
            </summary>
            <param name="macAddress">The mac address to find.</param>
            <param name="port">The port to search.</param>
            <param name="timeoutMs">How long to wait for a response before the call times out.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The device.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.GetDevice(System.Net.IPEndPoint,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a device at a specific <see cref="T:System.Net.IPEndPoint"/>.
            </summary>
            <param name="endPoint">The endpoint to search.</param>
            <param name="timeoutMs">How long to wait for a response before the call times out.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The device.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.GetDevice(System.Net.IPAddress,System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a device with at an IP address and port.
            </summary>
            <param name="address">IP address to search.</param>
            <param name="port">The port to search.</param>
            <param name="timeoutMs">How long to wait for a response before the call times out.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The device.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.GetDevice(System.String,System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a device using an IP or MAC address, and a port.
            </summary>
            <param name="address">The IP or MAC address to search.</param>
            <param name="port">The port to search.</param>
            <param name="timeoutMs">How long to wait for a response before the call times out.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The device.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.RegisterVirtualDevice(AydenIO.Lifx.LifxVirtualDevice)">
            <summary>
            Registers a virtual device with this LIFX network.
            </summary>
            <param name="device">The virtual device.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.Dispose">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.UpdateLocationMembershipInformation(AydenIO.Lifx.ILifxDevice,AydenIO.Lifx.ILifxLocationTag)">
            <summary>
            Informs the location manager that the <paramref name="device"/> is now part of <paramref name="location"/>.
            </summary>
            <param name="device">The device.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.UpdateGroupMembershipInformation(AydenIO.Lifx.ILifxDevice,AydenIO.Lifx.ILifxGroupTag)">
            <summary>
            Informs the group manager that the <paramref name="device"/> is now part of <paramref name="group"/>.
            </summary>
            <param name="device">The device.</param>
            <param name="group">The group.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.Send(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage)">
            <summary>
            Sends a message with no response.
            </summary>
            <param name="device">The device to target.</param>
            <param name="message">The message.</param>
            <returns>>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithResponse``1(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and returns the response.
            </summary>
            <typeparam name="T">The returned <see cref="T:AydenIO.Lifx.LifxMessage"/> derived message's type.</typeparam>
            <param name="device">The device to target.</param>
            <param name="message">The message.</param>
            <param name="timeoutMs">How long before the call times out if there is no response.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The returned message.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithMultipleResponse``1(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and returns all responses after timeout or cancellation.
            </summary>
            <typeparam name="T">The returned <see cref="T:AydenIO.Lifx.LifxMessage"/> derived messages' type.</typeparam>
            <param name="device">The device to target.</param>
            <param name="message">The message.</param>
            <param name="timeoutMs">How long before the call times out if there is no response.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The returned message.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithMultipleResponseDelegated``1(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage,System.Action{``0},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and invokes a handler for each response received.
            </summary>
            <typeparam name="T">The returned <see cref="T:AydenIO.Lifx.LifxMessage"/> derived messages' type.</typeparam>
            <param name="device">The device to target.</param>
            <param name="message">The message.</param>
            <param name="handler">The handler to call for each received <typeparamref name="T"/> message.</param>
            <param name="timeoutMs">How long before the call times out if there is no response.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The returned message.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithAcknowledgement(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and awaits an acknowledgement.
            </summary>
            <param name="device">The device to target.</param>
            <param name="message">The message.</param>
            <param name="timeoutMs">How long before the call times out if there is no response.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.Dispose(System.Boolean)">
            <summary>
            Internal dispose handler.
            </summary>
            <param name="disposing">Whether the <see cref="M:AydenIO.Lifx.LifxNetwork.Dispose"/> was called by the user.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.DiscoveryWorker">
            <summary>
            Thread worker that calls DiscoverOnce repeatedly every <see cref="P:AydenIO.Lifx.LifxNetwork.DiscoveryInterval"/> milliseconds.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendCommon(System.Net.IPEndPoint,AydenIO.Lifx.LifxMessage)">
            <summary>
            Converts a message to bytes, and sends it.
            </summary>
            <param name="endPoint">The destination, or null if message is to be broadcast.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SetMessageHeaderCommon(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage,AydenIO.Lifx.ResponseFlags)">
            <summary>
            Sets common header fields of the <paramref name="message"/>.
            </summary>
            <param name="device">The device to target, or null if message is to be broadcast.</param>
            <param name="message">The message.</param>
            <param name="responseFlags">The type of response required from the device.</param>
            <returns>An 8-bit sequence number.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithResponseCommon(System.Net.IPEndPoint,AydenIO.Lifx.LifxMessage,AydenIO.Lifx.IResponseAwaiter,System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends a message, and returns the response.
            </summary>
            <param name="endPoint">The endpoint to target.</param>
            <param name="message">The message.</param>
            <param name="awaiter">The awaiter that handles the response.</param>
            <param name="timeoutMs">How long before the call times out if there is no response.</param>
            <param name="isAcknowledgement">Whether the return type is <see cref="T:AydenIO.Lifx.Messages.Acknowledgement"/>.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithResponse``1(System.Net.IPEndPoint,AydenIO.Lifx.LifxMessage,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and returns the response.
            </summary>
            <typeparam name="T">The returned <see cref="T:AydenIO.Lifx.LifxMessage"/> derived message type.</typeparam>
            <param name="endPoint">The endpoint to target.</param>
            <param name="message">The message.</param>
            <param name="timeoutMs">How long before the call times out if there is no response.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The returned message.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithMultipleResponse``1(System.Net.IPEndPoint,AydenIO.Lifx.LifxMessage,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and returns all responses after timeout, or cancellation.
            </summary>
            <typeparam name="T">The returned <see cref="T:AydenIO.Lifx.LifxMessage"/> derived messages' type.</typeparam>
            <param name="endPoint">The endpoint to target.</param>
            <param name="message">The message.</param>
            <param name="timeoutMs">How long before the call times out if there is no response.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>The returned messages.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithMultipleResponseDelegated``1(System.Net.IPEndPoint,AydenIO.Lifx.LifxMessage,System.Action{AydenIO.Lifx.Response{``0}},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and invokes a handler for each response received.
            </summary>
            <typeparam name="T">The returned <see cref="T:AydenIO.Lifx.LifxMessage"/> derived messages' type.</typeparam>
            <param name="endPoint">The endpoint to target.</param>
            <param name="message">The message.</param>
            <param name="handler">The delegate to invoke for each response.</param>
            <param name="timeoutMs">How long before the call takes before the call completes.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
        </member>
        <member name="T:AydenIO.Lifx.LifxProduct">
            <summary>
            Default implementation of <see cref="T:AydenIO.Lifx.ILifxProduct"/>.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxProduct.VendorId">
            <summary>Gets or sets the <see cref="P:AydenIO.Lifx.LifxProduct.VendorId"/>.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxProduct.VendorName">
            <summary>Gets or sets the <see cref="P:AydenIO.Lifx.LifxProduct.VendorName"/>.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxProduct.ProductId">
            <summary>Gets or sets the <see cref="P:AydenIO.Lifx.LifxProduct.ProductId"/>.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxProduct.ProductName">
            <summary>Gets or sets the <see cref="P:AydenIO.Lifx.LifxProduct.ProductName"/>.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxProduct.SupportsColor">
            <summary>Gets or sets a value indicating whether the product supports colors.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxProduct.SupportsInfrared">
            <summary>Gets or sets a value indicating whether the product supports infrared.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxProduct.IsMultizone">
            <summary>Gets or sets a value indicating whether the product is a multizone product.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxProduct.IsChain">
            <summary>Gets or sets a value indicating whether the product is a chain product.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxProduct.IsMatrix">
            <summary>Gets or sets a value indicating whether the product is a matrix product.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxProduct.MinKelvin">
            <summary>Gets or sets the <see cref="P:AydenIO.Lifx.LifxProduct.MinKelvin"/>.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxProduct.MaxKelvin">
            <summary>Gets or sets the <see cref="P:AydenIO.Lifx.LifxProduct.MaxKelvin"/>.</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxSecurityProtocol">
            <summary>
            Represents security types supported by LIFX devices.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSecurityProtocol.Open">
            <summary>No security</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSecurityProtocol.WepPsk">
            <summary>WEP with pre-shared key (Unsupported).</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSecurityProtocol.WpaTkipPsk">
            <summary>WPA (TKIP encryption) with pre-shared key.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSecurityProtocol.WpaAesPsk">
            <summary>WPA (AES encryption) with pre-shared key.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSecurityProtocol.Wpa2AesPsk">
            <summary>WPA2 (AES encryption) with pre-shared key.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSecurityProtocol.Wpa2TkipPsk">
            <summary>WPA2 (TKIP encryption) with pre-shared key.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSecurityProtocol.Wpa2MixedPsk">
            <summary>WPA2 (AES and TKIP encryption) with pre-shared key.</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxService">
            <summary>
            Possible (public) service types for devices.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxService.Udp">
            <summary>The LIFX Protocol utilizes UDP/IP for all messages covered by the public API.</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxSignalStrength">
            <summary>
            Represents various levels of signal strengths from normalised <c>Signal</c> properties.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSignalStrength.None">
            <summary>No signal</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSignalStrength.Poor">
            <summary>Poor signal strength</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSignalStrength.Fair">
            <summary>Fair signal strength</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSignalStrength.Good">
            <summary>Good signal strength</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSignalStrength.Excellent">
            <summary>Excellent signal strength</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxStandardMultizoneLight">
            <summary>
            Represents a multizone light that doesn't support the extended API.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxStandardMultizoneLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress,System.Net.IPEndPoint,AydenIO.Lifx.ILifxVersion,AydenIO.Lifx.ILifxHostFirmware)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxStandardMultizoneLight"/> class.
            </summary>
            <param name="lifx">The <see cref="T:AydenIO.Lifx.LifxNetwork"/> that the device belongs to.</param>
            <param name="macAddress">The <see cref="T:AydenIO.Lifx.MacAddress"/> of the device.</param>
            <param name="endPoint">The <see cref="T:System.Net.IPEndPoint"/> of the device.</param>
            <param name="version">The <see cref="T:AydenIO.Lifx.ILifxVersion"/> of the device.</param>
            <param name="hostFirmware">The <see cref="T:AydenIO.Lifx.ILifxHostFirmware"/> of the device.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxStandardMultizoneLight.GetMultizoneState(System.UInt16,System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxStandardMultizoneLight.SetMultizoneState(AydenIO.Lifx.LifxApplicationRequest,System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.TimeSpan,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxStandardMultizoneLight.SetMultizoneState(System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxVirtualDevice">
            <summary>
            Represents a virtual LIFX device.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxVirtualDevice"/> class.
            </summary>
            <param name="lifx">The <see cref="T:AydenIO.Lifx.LifxNetwork"/> to associated this virtual device with.</param>
            <param name="macAddress">The <see cref="P:AydenIO.Lifx.LifxVirtualDevice.MacAddress"/> of this virtual device.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.MacAddress">
            <summary>Gets the virtual MAC address for the device.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.VendorId">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.VendorName">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.ProductId">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.ProductName">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.SupportsColor">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.SupportsInfrared">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.IsMultizone">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.IsChain">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.IsMatrix">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.MinKelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.MaxKelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.VersionNumber">
            <summary>Gets the "hardware" version of this virtual device.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.Lifx">
            <summary>Gets the <c>LifxNetwork></c> this virtual device is associated with.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.ServicesValue">
            <summary>Gets the internal collection of supported services.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.HostInfoValue">
            <summary>Gets the internal host info.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.WifiInfoValue">
            <summary>Gets the internal wifi info.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.HostFirmwareValue">
            <summary>Gets the internal host firmware.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.WifiFirmwareValue">
            <summary>Gets the internal wifi firmware.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.StartTime">
            <summary>Gets the time that this virtual device was started.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.LastDownTime">
            <summary>Gets the time that this virtual device was last stopped.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.InfoValue">
            <summary>Gets the internal info value.</summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.VersionValue">
            <summary>Gets the internal version value.</summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetServices(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetHostInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetWifiInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetHostFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetWifiFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetVersion(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.PowerOff(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.PowerOn(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetLocation(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.SetLocation(AydenIO.Lifx.ILifxLocationTag,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetGroup(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.SetGroup(AydenIO.Lifx.ILifxGroupTag,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetLabel(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.SetLabel(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetPower(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.SetPower(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.AddTxBytes(System.UInt32)">
            <summary>
            Adds <paramref name="x"/> to the internal transmitted byte counter.
            </summary>
            <param name="x">The additional byte count.</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.AddRxBytes(System.UInt32)">
            <summary>
            Adds <paramref name="x"/> to the internal received bytes counter.
            </summary>
            <param name="x">The additional byte count.</param>
        </member>
        <member name="T:AydenIO.Lifx.LifxVirtualInfraredLight">
            <summary>
            Represents a virtual LIFX light with infrared support.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualInfraredLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxVirtualInfraredLight"/> class.
            </summary>
            <param name="lifx">The <see cref="T:AydenIO.Lifx.LifxNetwork"/> to associated this virtual light with.</param>
            <param name="macAddress">The <see cref="T:AydenIO.Lifx.MacAddress"/> of this virtual light.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualInfraredLight.SupportsInfrared">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualInfraredLight.GetInfrared(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualInfraredLight.SetInfrared(System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxVirtualLight">
            <summary>
            Represents a virtual LIFX light.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxVirtualLight"/> class.
            </summary>
            <param name="lifx">The <see cref="T:AydenIO.Lifx.LifxNetwork"/> to associated this virtual device with.</param>
            <param name="macAddress">The <see cref="T:AydenIO.Lifx.MacAddress"/> of this virtual device.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualLight.MinKelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualLight.MaxKelvin">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.GetState(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetColor(AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetPower(System.Boolean,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetColor(AydenIO.Lifx.ILifxColor,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetPower(System.Boolean,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetPower(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxVirtualMultizoneLight">
            <summary>
            Represents a virtual LIFX multizone light.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.LifxVirtualMultizoneLight"/> class.
            </summary>
            <param name="lifx">The <see cref="T:AydenIO.Lifx.LifxNetwork"/> to associated this virtual device with.</param>
            <param name="macAddress">The <see cref="T:AydenIO.Lifx.MacAddress"/> of this virtual device.</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualMultizoneLight.SupportsColor">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualMultizoneLight.SupportsInfrared">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualMultizoneLight.IsMultizone">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.GetMultizoneState(System.UInt16,System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.SetMultizoneState(AydenIO.Lifx.LifxApplicationRequest,System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.TimeSpan,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.SetMultizoneState(System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.SetMultizoneState(AydenIO.Lifx.LifxApplicationRequest,System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.UInt32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.SetMultizoneState(System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxWaveform">
            <summary>
            Possible waveform types for LIFX light bulb effects.
            <para>See also <seealso href="https://lan.developer.lifx.com/docs/waveforms" />.</para>
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWaveform.Saw">
            <summary>
            Light interpolates linearly from current color to color.
            Duration of each cycle lasts for period milliseconds.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWaveform.Sine">
            <summary>
            The color will cycle smoothly from current color to color and then end back at current color.
            The duration of one cycle will last for period milliseconds.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWaveform.HalfSine">
            <summary>
            Light interpolates smoothly from current color to color.
            Duration of each cycle lasts for period milliseconds.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWaveform.Triangle">
            <summary>
            Light interpolates linearly from current color to color, then back to current color.
            Duration of each cycle lasts for period milliseconds.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWaveform.Pulse">
            <summary>
            The color will be set immediately to color, then to current color after the duty cycle fraction expires.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxWifiInterface">
            <summary>
            An enumeration of the WiFi interface on a device.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWifiInterface.SoftAP">
            <summary>Software AP mode - used when device is unconfigured.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWifiInterface.Station">
            <summary>Station mode - used when device is connected to another WiFi network.</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxWifiStatus">
            <summary>
            An enumeration of statuses for a WiFi interface.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWifiStatus.Connecting">
            <summary>The interface is in the connecting state.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWifiStatus.Connected">
            <summary>The interface is in the connected state.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWifiStatus.Failed">
            <summary>The interface is in the failed state.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWifiStatus.Off">
            <summary>The interface is disabled.</summary>
        </member>
        <member name="T:AydenIO.Lifx.MacAddressStyle">
            <summary>
            Common styles for MAC addresses.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.MacAddressStyle.None">
            <summary>A MAC address with no separator between octets.</summary>
        </member>
        <member name="F:AydenIO.Lifx.MacAddressStyle.Colon">
            <summary>A MAC address with a colon ':' between octets..</summary>
        </member>
        <member name="F:AydenIO.Lifx.MacAddressStyle.Dash">
            <summary>A MAC address with a dash '-' between octets.</summary>
        </member>
        <member name="T:AydenIO.Lifx.MacAddress">
            <summary>
            Represents a MAC address.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.MacAddress.Broadcast">
            <summary>Gets the standard Ethernet broadcast MAC address.</summary>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.MacAddress"/> class.
            </summary>
            <param name="bytes">The byte array.</param>
        </member>
        <member name="P:AydenIO.Lifx.MacAddress.IsBroadcast">
            <summary>Gets a value indicating whether this MAC address is the broadcast mac address.</summary>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.op_Equality(AydenIO.Lifx.MacAddress,AydenIO.Lifx.MacAddress)">
            <summary>
            Compares two <see cref="T:AydenIO.Lifx.MacAddress"/>es for equality.
            </summary>
            <param name="left">The left <see cref="T:AydenIO.Lifx.MacAddress"/>.</param>
            <param name="right">The right <see cref="T:AydenIO.Lifx.MacAddress"/>.</param>
            <returns>Whether the left and right operands are equal.</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.op_Inequality(AydenIO.Lifx.MacAddress,AydenIO.Lifx.MacAddress)">
            <summary>
            Compares two <see cref="T:AydenIO.Lifx.MacAddress"/>es for inequality.
            </summary>
            <param name="left">The left <see cref="T:AydenIO.Lifx.MacAddress"/>.</param>
            <param name="right">The right <see cref="T:AydenIO.Lifx.MacAddress"/>.</param>
            <returns>Whether the left and right operands are not equal.</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.TryParse(System.String,AydenIO.Lifx.MacAddress@)">
            <summary>
            Attempt to parse a string as a MAC address. Matches aabbccddeeff, aa:bb:cc:dd:ee:ff, aa-bb-cc-dd-ee-ff.
            </summary>
            <param name="macAddress">The string representation of the MAC address.</param>
            <param name="destination">An out to the resulting <see cref="T:AydenIO.Lifx.MacAddress" />.</param>
            <returns>Whether the parsing was successful.</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.Parse(System.String)">
            <summary>
            Attempt to parse a string as a MAC address. Matches aabbccddeeff, aa:bb:cc:dd:ee:ff, aa-bb-cc-dd-ee-ff.
            </summary>
            <param name="macAddress">The string representation of the MAC address.</param>
            <returns>The resulting MAC address.</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.NewLocallyAdministeredAddress">
            <summary>
            Creates a random locally administered MAC address.
            </summary>
            <returns>The random MAC address.</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.GetBytes">
            <summary>
            Get the MAC address as a byte array.
            </summary>
            <returns>The MAC address as a byte array.</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.ToString(AydenIO.Lifx.MacAddressStyle,System.Boolean)">
            <summary>
            Convert the MAC address to a string.
            </summary>
            <param name="style">Which style to use.</param>
            <param name="uppercase">Whether it should be uppercase.</param>
            <returns>A string representation of the MAC address.</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.ToString">
            <summary>
            Convert the MAC address to a string.
            </summary>
            <returns>A string representation of the MAC address.</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.Equals(AydenIO.Lifx.MacAddress)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Membership`1">
            <summary>
            A collection of devices belonging to a membership information.
            </summary>
            <typeparam name="TTag">The membership tag type.</typeparam>
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.#ctor(System.Guid,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Membership`1"/> class.
            </summary>
            <param name="guid">The identifier for the membership information.</param>
            <param name="label">The label for the membership information.</param>
            <param name="updatedAt">The time the membership information was last updated.</param>
        </member>
        <member name="E:AydenIO.Lifx.Membership`1.DeviceAdded">
            <inheritdoc />
        </member>
        <member name="E:AydenIO.Lifx.Membership`1.DeviceRemoved">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Membership`1.DeviceCount">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Membership`1.Count">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Membership`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Membership`1.Label">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Membership`1.UpdatedAt">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.GetIdentifier">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.Rename(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.System#Collections#Generic#ICollection{AydenIO#Lifx#ILifxDevice}#Clear">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.Add(AydenIO.Lifx.ILifxDevice)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.Remove(AydenIO.Lifx.ILifxDevice)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.Contains(AydenIO.Lifx.ILifxDevice)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.CopyTo(AydenIO.Lifx.ILifxDevice[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.RenameDeviceMembership(AydenIO.Lifx.ILifxDevice,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Called for each device that.
            </summary>
            <param name="device">The device that the membership rename operation is called on.</param>
            <param name="timeoutMs">How long to wait for a response before the call times out.</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Membership`1.Purge">
            <summary>
            Removes all stale weak references in the collection.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.MembershipCollection`3">
            <summary>
            Manages collections known to the <see cref="T:AydenIO.Lifx.LifxNetwork"/>.
            </summary>
            <typeparam name="TCollection">The collection's type.</typeparam>
            <typeparam name="TPublicCollection">The collection's interface type.</typeparam>
            <typeparam name="TTag">The collection's membership information type as known to devices.</typeparam>
        </member>
        <member name="M:AydenIO.Lifx.MembershipCollection`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.MembershipCollection`3"/> class.
            </summary>
        </member>
        <member name="E:AydenIO.Lifx.MembershipCollection`3.CollectionCreated">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.MembershipCollection`3.Count">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MembershipCollection`3.GetGrouping(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MembershipCollection`3.GetGrouping(System.Guid,System.String)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MembershipCollection`3.GetGrouping(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MembershipCollection`3.GetGrouping(AydenIO.Lifx.ILifxMembershipTag)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MembershipCollection`3.Create(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MembershipCollection`3.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MembershipCollection`3.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MembershipCollection`3.UpdateMembershipInformation(AydenIO.Lifx.ILifxDevice,`2)">
            <summary>
            Removes a <see cref="T:AydenIO.Lifx.ILifxDevice"/> from a former grouping and adds it to the grouping specified by <paramref name="newCollection"/>.
            </summary>
            <param name="device">The <see cref="T:AydenIO.Lifx.ILifxDevice"/> to updated the membership information for.</param>
            <param name="newCollection">The <typeparamref name="TCollection"/> to add the <see cref="T:AydenIO.Lifx.ILifxDevice"/> to.</param>
        </member>
        <member name="M:AydenIO.Lifx.MembershipCollection`3.CreateCollection(System.Guid,System.String,System.DateTime)">
            <summary>
            Used to create a collection.
            </summary>
            <param name="guid">The identifier of the group.</param>
            <param name="label">The label for the group.</param>
            <param name="updatedAt">When the group was last updated.</param>
            <returns>The created <typeparamref name="TCollection"/>.</returns>
        </member>
        <member name="T:AydenIO.Lifx.LifxMembershipCreatedEventHandler`2">
            <summary>
            An event handler for when a membership group is created.
            </summary>
            <typeparam name="TMembership">The membership group type.</typeparam>
            <typeparam name="TTag">The membership group's tag type.</typeparam>
            <param name="sender">The membership collection that created the membership group.</param>
            <param name="e">The event arguments containing the membership collection.</param>
        </member>
        <member name="T:AydenIO.Lifx.MembershipCreatedEventArgs`2">
            <summary>
            The event arguments for when a new membership is created.
            </summary>
            <typeparam name="TMembership">The membership type.</typeparam>
            <typeparam name="TTag">The membership type's tag.</typeparam>
        </member>
        <member name="M:AydenIO.Lifx.MembershipCreatedEventArgs`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.MembershipCreatedEventArgs`2"/> class.
            </summary>
            <param name="collection">The membership.</param>
        </member>
        <member name="P:AydenIO.Lifx.MembershipCreatedEventArgs`2.Collection">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.ILifxAccessPoint">
            <summary>
            Holds values representing a found access point.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxAccessPoint.Ssid">
            <summary>Gets the SSID of the found access point.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxAccessPoint.SecurityProtocol">
            <summary>Gets the security protocol of the found access point.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxAccessPoint.Strength">
            <summary>Gets the signal strength of the found access point.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxAccessPoint.Channel">
            <summary>Gets the channel of the found access point.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxApplicationRequest">
            <summary>
            This type allows you to provide hints to the device about how the changes you make should be performed.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxApplicationRequest.Apply">
            <summary>Gets how the change should be performed.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorMultiZoneState">
            <summary>
            Represents multiple zones on a MultiZone device.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorZoneCount">
            <summary>
            Represents the count of zones in a multizone device.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxColorZoneCount.ZoneCount">
            <summary>Gets the number of zones the device has.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorZoneIndex">
            <summary>
            Represents the first index of states of zones on multizone devices.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxColorZoneIndex.Index">
            <summary>Gets the indexed zone we start applying the colors from. The first zone is 0.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorZoneRange">
            <summary>
            Represents a range of zones covered by a multizone state message.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxColorZoneRange.StartIndex">
            <summary>Gets the index of the first zone.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxColorZoneRange.EndIndex">
            <summary>Gets the index of the last zone.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorZones">
            <summary>
            Common properties for set, and state messages for multizone lights.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxColorZones.Colors">
            <summary>Gets the colors where colors is 8/82 HSBK values and number of colors from this array will be applied sequentially from the <c>Index</c>'d zone on the device.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorZoneState">
            <summary>
            Represents the state of a single zone on a multizone device.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxEcho">
            <summary>
            Holds a payload for pings.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxEcho.GetPayload">
            <summary>
            Gets the payload.
            </summary>
            <returns>The payload.</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxEcho.SetPayload(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Sets the payload.
            </summary>
            <param name="payload">The payload.</param>
        </member>
        <member name="T:AydenIO.Lifx.ILifxGroupTag">
            <summary>
            Represents a group membership for a device.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxGroupTag.Group">
            <summary>Gets the group identifier.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxHostFirmware">
            <summary>
            Device's host firmware.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostFirmware.Build">
            <summary>Gets the firmware build time.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostFirmware.VersionMinor">
            <summary>Gets the firmware minor version.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostFirmware.VersionMajor">
            <summary>Gets the firmware major version.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxHostInfo">
            <summary>
            Device's host info.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostInfo.Signal">
            <summary>Gets the radio receive signal strength.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostInfo.TransmittedBytes">
            <summary>Gets the count of transmitted bytes since power on.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostInfo.ReceivedBytes">
            <summary>Gets the count of received bytes since power on.</summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxHostInfo.GetSignalStrength">
            <summary>
            Returns the signal strength as a normalised value.
            </summary>
            <returns>The quality of the received signal.</returns>
        </member>
        <member name="T:AydenIO.Lifx.ILifxInfo">
            <summary>
            Device's info.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxInfo.Uptime">
            <summary>Gets the time since last power on.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxInfo.Downtime">
            <summary>Gets the lLast power off period (5-second accuracy).</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxInfrared">
            <summary>
            Device's infrared state.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxInfrared.Level">
            <summary>Gets the current maximum setting for the infrared channel.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxLabel">
            <summary>
            Device's label.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxLabel.Label">
            <summary>Gets the device label.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxLightState">
            <summary>
            Light's state.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxLocationTag">
            <summary>
            A tag that identifies a device as part of a location.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxLocationTag.Location">
            <summary>Gets the location identifier.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxMembershipTag">
            <summary>
            Represents a collection that the device is a member of.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxMembershipTag.Label">
            <summary>Gets the label for the membership information.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxMembershipTag.UpdatedAt">
            <summary>Gets when the membership information was updated.</summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxMembershipTag.GetIdentifier">
            <summary>Gets the identifier for the membership information.</summary>
            <returns>The identifier.</returns>
        </member>
        <member name="T:AydenIO.Lifx.ILifxPower">
            <summary>
            Device's power state.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxPower.PoweredOn">
            <summary>Gets a value indicating whether the device is powered on.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxService">
            <summary>
            A service supported by a device.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxService.Service">
            <summary>Gets the service type.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxService.Port">
            <summary>Gets the port that the service is on.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxTag">
            <summary>
            Device's tags' label.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxTag.Label">
            <summary>Gets the label for the tag.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxTagId">
            <summary>
            Device's tag.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxTagId.TagId">
            <summary>Gets the tag identifier.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxTime">
            <summary>
            Device's time.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxTime.Time">
            <summary>Gets turrent time from the device.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxTransition">
            <summary>
            Holds the transition time for a transitionable property.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxTransition.Duration">
            <summary>Gets the duration of the transition.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxVersion">
            <summary>
            Device's version.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxVersion.VendorId">
            <summary>Gets the vendor identifier.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxVersion.ProductId">
            <summary>Gets the product identifier.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxVersion.Version">
            <summary>Gets the hardware version.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxWaveform">
            <summary>
            A waveform for a light.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveform.Transient">
            <summary>Gets a value indicating whether the color does not persist.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveform.Period">
            <summary>Gets the duration of a cycle.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveform.Cycles">
            <summary>Gets the number of cycles.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveform.SkewRatio">
            <summary>Gets the waveform skew.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveform.Waveform">
            <summary>Gets the waveform type.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxWaveformOptional">
            <summary>
            A waveform for a light, with optional end parameters.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveformOptional.SetHue">
            <summary>Gets a value indicating whether to use the end color's hue.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveformOptional.SetSaturation">
            <summary>Gets a value indicating whether to use the end color's saturation.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveformOptional.SetBrightness">
            <summary>Gets a value indicating whether to use the end color's brightness.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveformOptional.SetKelvin">
            <summary>Gets a value indicating whether to use the end color's color temperature.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxWifiFirmware">
            <summary>
            A device's wifi firmware.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiFirmware.Build">
            <summary>Gets the firmware build time.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiFirmware.VersionMinor">
            <summary>Gets the firmware minor version.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiFirmware.VersionMajor">
            <summary>Gets the firmware major version.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxWifiInfo">
            <summary>
            A device's wifi state.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiInfo.Signal">
            <summary>Gets the radio receive signal strength.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiInfo.TransmittedBytes">
            <summary>Gets the count of transmitted bytes since power on.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiInfo.ReceivedBytes">
            <summary>Gets the count of received bytes since power on.</summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxWifiInfo.GetSignalStrength">
            <summary>
            Returns the signal strength as a normalised value.
            </summary>
            <returns>The quality of the received signal.</returns>
        </member>
        <member name="T:AydenIO.Lifx.ILifxWifiInterface">
            <summary>
            A device's wifi interface.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiInterface.InterfacTypee">
            <summary>Gets the interface type.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxWifiState">
            <summary>
            A device's wifi state.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiState.Status">
            <summary>Gets the current connection state.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiState.IPAddressV4">
            <summary>Gets the current IPv4 address.</summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiState.IPAddressV6">
            <summary>Gets the current IPv6 address.</summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.Acknowledgement">
            <summary>
            Response to any message sent with _ack_required_ set to 1.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.Acknowledgement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.Acknowledgement"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.EchoRequest">
            <summary>
            Request an arbitrary payload be echoed back.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.EchoRequest"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoRequest.#ctor(AydenIO.Lifx.ILifxEcho)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.EchoRequest"/> class.
            </summary>
            <param name="echoRequest">A previous <see cref="T:AydenIO.Lifx.ILifxEcho"/> to copy the payload from.</param>
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoRequest.GetPayload">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoRequest.SetPayload(System.Collections.Generic.IEnumerable{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoRequest.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoRequest.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.EchoResponse">
            <summary>
            Response to <c>EchoRequest</c> message.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.EchoResponse"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoResponse.#ctor(AydenIO.Lifx.ILifxEcho)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.EchoResponse"/> class.
            </summary>
            <param name="echoRequest">A previous <see cref="T:AydenIO.Lifx.ILifxEcho"/> to copy the payload from.</param>
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoResponse.GetPayload">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoResponse.SetPayload(System.Collections.Generic.IEnumerable{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoResponse.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.EchoResponse.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetAccessPoints">
            <summary>
            A message sent to a device to retrieve the list of access points the device can se.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetAccessPoints.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetAccessPoints"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetColorZones">
            <summary>
            GetColorZones is used to request the zone colors for a range of zones.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetColorZones.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetColorZones"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.GetColorZones.StartIndex">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.GetColorZones.EndIndex">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetColorZones.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetColorZones.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetExtendedColorZones">
            <summary>
            This message will ask the device to return a StateExtendedColorZones containing all of it's colors.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetExtendedColorZones.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetExtendedColorZones"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetGroup">
            <summary>
            Ask the bulb to return its group membership information.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetGroup"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetHostFirmware">
            <summary>
            Gets Host MCU firmware information.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetHostFirmware.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetHostFirmware"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetHostInfo">
            <summary>
            Get Host MCU information.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetHostInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetHostInfo"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetInfo">
            <summary>
            Get run-time information.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetInfo"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetLabel">
            <summary>
            Get device label.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetLabel"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetLocation">
            <summary>
            Ask the bulb to return its location information.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetLocation"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetPower">
            <summary>
            Get device power level.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetPower.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetPower"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetService">
            <summary>
            Sent by a client to acquire responses from all devices on the local network.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetService"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetTagLabel">
            <summary>
            A message sent to a device to retrieve the label for a tag.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetTagLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetTagLabel"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.GetTagLabel.TagId">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetTagLabel.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetTagLabel.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetTags">
            <summary>
            Sent to a device to retrieve its tags.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetTags.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetTags"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetTime">
            <summary>
            Sent to a device to get the current time.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetTime"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetVersion">
            <summary>
            Get the hardware version.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetVersion"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetWifiFirmware">
            <summary>
            Get Wifi subsystem firmware.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetWifiFirmware.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetWifiFirmware"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetWifiInfo">
            <summary>
            Get Wifi subsystem information.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetWifiInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetWifiInfo"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetWifiState">
            <summary>
            Sent to a device to retrieve the wifi interface state.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetWifiState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.GetWifiState"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.GetWifiState.InterfacTypee">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetWifiState.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.GetWifiState.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightGet">
            <summary>
            Sent by a client to obtain the light state.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightGet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightGet"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightGetInfrared">
            <summary>
            Gets the current maximum power level of the Infrared channel.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightGetInfrared.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightGetInfrared"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightGetPower">
            <summary>
            Sent by a client to obtain the power level.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightGetPower.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightGetPower"/> class.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightSetColor">
            <summary>
            Sent by a client to change the light state.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightSetColor"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetColor.Hue">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetColor.Saturation">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetColor.Brightness">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetColor.Kelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetColor.Duration">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetColor.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetColor.ToHsbk">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetColor.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetColor.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightSetInfrared">
            <summary>
            Send this message to alter the current maximum brightness for the infrared channel.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetInfrared.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightSetInfrared"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetInfrared.Level">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetInfrared.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetInfrared.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightSetPower">
            <summary>
            Sent by a client to change the light power level.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetPower.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightSetPower"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetPower.PoweredOn">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetPower.Duration">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetPower.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetPower.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightSetWaveform">
            <summary>
            Apply an effect to the bulb.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetWaveform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightSetWaveform"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetWaveform.#ctor(AydenIO.Lifx.LifxMessageType)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightSetWaveform"/> class.
            </summary>
            <param name="type">The type of the packet when the class is derived.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveform.Transient">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveform.Hue">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveform.Saturation">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveform.Brightness">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveform.Kelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveform.Period">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveform.Cycles">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveform.SkewRatio">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveform.Waveform">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetWaveform.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetWaveform.ToHsbk">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetWaveform.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetWaveform.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightSetWaveformOptional">
            <summary>
            Optionally set effect parameters. Same as SetWaveform but allows some parameters to be set from the current value on device.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetWaveformOptional.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightSetWaveformOptional"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveformOptional.SetHue">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveformOptional.SetSaturation">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveformOptional.SetBrightness">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightSetWaveformOptional.SetKelvin">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetWaveformOptional.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightSetWaveformOptional.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightState">
            <summary>
            Sent by a device to provide the current light state.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightState"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightState.#ctor(AydenIO.Lifx.ILifxLightState)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightState"/> class.
            </summary>
            <param name="lightState">The <see cref="T:AydenIO.Lifx.ILifxLightState"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightState.Hue">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightState.Saturation">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightState.Brightness">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightState.Kelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightState.PoweredOn">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightState.Label">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightState.ToHsbk">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightState.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightState.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightState.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightStateInfrared">
            <summary>
            This message is returned from a GetInfrared message. It indicates the current maximum setting for the infrared channel.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightStateInfrared.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightStateInfrared"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightStateInfrared.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightStateInfrared"/> class.
            </summary>
            <param name="level">The level to initialize this message from.</param>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightStateInfrared.#ctor(AydenIO.Lifx.ILifxInfrared)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightStateInfrared"/> class.
            </summary>
            <param name="infrared">The <see cref="T:AydenIO.Lifx.ILifxInfrared"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightStateInfrared.Level">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightStateInfrared.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightStateInfrared.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightStatePower">
            <summary>
            Sent by a device to provide the current power level.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightStatePower.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightStatePower"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightStatePower.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightStatePower"/> class.
            </summary>
            <param name="poweredOn">The poweredOn to initialize this message with.</param>
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightStatePower.#ctor(AydenIO.Lifx.ILifxPower)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.LightStatePower"/> class.
            </summary>
            <param name="power">The <see cref="T:AydenIO.Lifx.ILifxPower"/> to initialize this messagw from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.LightStatePower.PoweredOn">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightStatePower.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.LightStatePower.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.SetColorZones">
            <summary>
            A message sent to a multizone device to set all zones between <see cref="P:AydenIO.Lifx.Messages.SetColorZones.StartIndex"/> and <see cref="P:AydenIO.Lifx.Messages.SetColorZones.EndIndex"/> to a color.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetColorZones.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.SetColorZones"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetColorZones.StartIndex">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetColorZones.EndIndex">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetColorZones.Hue">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetColorZones.Saturation">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetColorZones.Brightness">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetColorZones.Kelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetColorZones.Duration">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetColorZones.Apply">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetColorZones.ToHsbk">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetColorZones.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetColorZones.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetColorZones.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.SetExtendedColorZones">
            <summary>
            This messages lets you change all the zones on your device in one message.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetExtendedColorZones.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.SetExtendedColorZones"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetExtendedColorZones.MaxZoneCount">
            <summary>Gets the current maximum number of zones in a LIFX MultiZone device.</summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetExtendedColorZones.Duration">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetExtendedColorZones.Apply">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetExtendedColorZones.Index">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetExtendedColorZones.Colors">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetExtendedColorZones.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetExtendedColorZones.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.SetGroup">
            <summary>
            Set the device group.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.SetGroup"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetGroup.Group">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetGroup.Label">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetGroup.UpdatedAt">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetGroup.AydenIO#Lifx#ILifxMembershipTag#GetIdentifier">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetGroup.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetGroup.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.SetLabel">
            <summary>
            Sent to a device to change its label.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.SetLabel"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetLabel.Label">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetLabel.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetLabel.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.SetLocation">
            <summary>
            Sent to a device to update its location.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.SetLocation"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetLocation.Location">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetLocation.Label">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetLocation.UpdatedAt">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetLocation.AydenIO#Lifx#ILifxMembershipTag#GetIdentifier">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetLocation.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetLocation.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.SetPower">
            <summary>
            Sent to a device to set its power state.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetPower.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.SetPower"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.SetPower.PoweredOn">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetPower.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.SetPower.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateAccessPoint">
            <summary>
            Sent from a device stating an access point the device can see.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateAccessPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateAccessPoint"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateAccessPoint.InterfacTypee">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateAccessPoint.Ssid">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateAccessPoint.SecurityProtocol">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateAccessPoint.Strength">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateAccessPoint.Channel">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateAccessPoint.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateAccessPoint.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateExtendedColorZones">
            <summary>
            Sent from a multizone device and contains the state of the zones.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateExtendedColorZones.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateExtendedColorZones"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateExtendedColorZones.#ctor(AydenIO.Lifx.ILifxColorMultiZoneState)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateExtendedColorZones"/> class.
            </summary>
            <param name="state">The <see cref="T:AydenIO.Lifx.ILifxColorMultiZoneState"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateExtendedColorZones.MaxZoneCount">
            <summary>Gets the current maximum number of zones in a LIFX MultiZone device.</summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateExtendedColorZones.ZoneCount">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateExtendedColorZones.Index">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateExtendedColorZones.Colors">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateExtendedColorZones.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateExtendedColorZones.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateGroup">
            <summary>
            Sent from a device stating the group that the device is a part of.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateGroup"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateGroup.#ctor(AydenIO.Lifx.ILifxGroupTag)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateGroup"/> class.
            </summary>
            <param name="group">The <see cref="T:AydenIO.Lifx.ILifxGroupTag"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateGroup.Group">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateGroup.Label">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateGroup.UpdatedAt">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateGroup.AydenIO#Lifx#ILifxMembershipTag#GetIdentifier">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateGroup.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateGroup.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateHostFirmware">
            <summary>
            Sent from a device stating its host firmware.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateHostFirmware.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateHostFirmware"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateHostFirmware.#ctor(AydenIO.Lifx.ILifxHostFirmware)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateHostFirmware"/> class.
            </summary>
            <param name="hostFirmware">The <see cref="T:AydenIO.Lifx.ILifxHostFirmware"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateHostFirmware.Build">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateHostFirmware.VersionMinor">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateHostFirmware.VersionMajor">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateHostFirmware.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateHostFirmware.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateHostInfo">
            <summary>
            Sent from a device stating its host info.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateHostInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateHostInfo"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateHostInfo.#ctor(AydenIO.Lifx.ILifxHostInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateHostInfo"/> class.
            </summary>
            <param name="hostInfo">The <see cref="T:AydenIO.Lifx.ILifxHostInfo"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateHostInfo.Signal">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateHostInfo.TransmittedBytes">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateHostInfo.ReceivedBytes">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateHostInfo.GetSignalStrength">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateHostInfo.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateHostInfo.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateInfo">
            <summary>
            Sent by a device stating its info.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateInfo"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateInfo.#ctor(AydenIO.Lifx.ILifxInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateInfo"/> class.
            </summary>
            <param name="info">The <see cref="T:AydenIO.Lifx.ILifxInfo"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateInfo.Time">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateInfo.Uptime">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateInfo.Downtime">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateInfo.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateInfo.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateLabel">
            <summary>
            Sent by a device to state its current label.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateLabel"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateLabel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateLabel"/> class.
            </summary>
            <param name="label">The string label to initialize this message from.</param>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateLabel.#ctor(AydenIO.Lifx.ILifxLabel)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateLabel"/> class.
            </summary>
            <param name="label">The <see cref="T:AydenIO.Lifx.ILifxLabel"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateLabel.Label">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateLabel.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateLabel.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateLocation">
            <summary>
            Sent from a device to state its location.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateLocation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateLocation"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateLocation.#ctor(AydenIO.Lifx.ILifxLocationTag)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateLocation"/> class.
            </summary>
            <param name="location">The <see cref="T:AydenIO.Lifx.ILifxLocationTag"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateLocation.Location">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateLocation.Label">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateLocation.UpdatedAt">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateLocation.AydenIO#Lifx#ILifxMembershipTag#GetIdentifier">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateLocation.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateLocation.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateMultiZone">
            <summary>
            Sent by a multizone device to state up to 8 zones of color.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateMultiZone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateMultiZone"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateMultiZone.MaxZoneCount">
            <summary>Gets the maximum number of zones supported by this message.</summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateMultiZone.ZoneCount">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateMultiZone.Index">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateMultiZone.Colors">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateMultiZone.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateMultiZone.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StatePower">
            <summary>
            Sent by a device to indicate it's current power state.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StatePower.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StatePower"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StatePower.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StatePower"/> class.
            </summary>
            <param name="poweredOn">The <see cref="P:AydenIO.Lifx.Messages.StatePower.PoweredOn"/> value to initialize this message from.</param>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StatePower.#ctor(AydenIO.Lifx.ILifxPower)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StatePower"/> class.
            </summary>
            <param name="power">The <see cref="T:AydenIO.Lifx.ILifxPower"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StatePower.PoweredOn">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StatePower.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StatePower.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateService">
            <summary>
            Sent by a device to indicate the services it supports.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateService"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateService.#ctor(AydenIO.Lifx.ILifxService)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateService"/> class.
            </summary>
            <param name="service">The <see cref="T:AydenIO.Lifx.ILifxService"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateService.Service">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateService.Port">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateService.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateService.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateTagLabel">
            <summary>
            Sent by a device to state the label for a tag.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateTagLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateTagLabel"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateTagLabel.TagId">
            <inheritdoc/>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateTagLabel.Label">
            <inheritdoc/>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateTagLabel.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc/>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateTagLabel.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc/>
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateTags">
            <summary>
            Seny by a device to state its tags.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateTags.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateTags"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateTags.TagId">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateTags.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateTags.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateTime">
            <summary>
            Sent by a device to state the current time.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateTime"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateTime.Time">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateTime.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateTime.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateVersion">
            <summary>
            Sent by a device to state its version.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateVersion"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateVersion.#ctor(AydenIO.Lifx.ILifxVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateVersion"/> class.
            </summary>
            <param name="version">The <see cref="T:AydenIO.Lifx.ILifxVersion"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateVersion.VendorId">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateVersion.ProductId">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateVersion.Version">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateVersion.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateVersion.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateWifiFirmware">
            <summary>
            Sent by a device to state its wifi firmware.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiFirmware.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateWifiFirmware"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiFirmware.#ctor(AydenIO.Lifx.ILifxWifiFirmware)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateWifiFirmware"/> class.
            </summary>
            <param name="wifiFirmware">The <see cref="T:AydenIO.Lifx.ILifxWifiFirmware"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateWifiFirmware.Build">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateWifiFirmware.VersionMinor">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateWifiFirmware.VersionMajor">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiFirmware.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiFirmware.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateWifiInfo">
            <summary>
            Sent by a device to state its wifi info.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateWifiInfo"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiInfo.#ctor(AydenIO.Lifx.ILifxWifiInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateWifiInfo"/> class.
            </summary>
            <param name="wifiInfo">The <see cref="T:AydenIO.Lifx.ILifxWifiInfo"/> to initialize this message from.</param>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateWifiInfo.Signal">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateWifiInfo.TransmittedBytes">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateWifiInfo.ReceivedBytes">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiInfo.GetSignalStrength">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiInfo.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiInfo.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateWifiState">
            <summary>
            Represents a StateWifiState packet.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateWifiState"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateWifiState.InterfacTypee">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateWifiState.Status">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateWifiState.IPAddressV4">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateWifiState.IPAddressV6">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiState.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateWifiState.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Messages.StateZone">
            <summary>
            Sent by a multizone device to state the color of a single zone.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateZone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Messages.StateZone"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateZone.ZoneCount">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateZone.Index">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateZone.Hue">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateZone.Saturation">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateZone.Brightness">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.Messages.StateZone.Kelvin">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateZone.ToHsbk">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateZone.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateZone.WritePayload(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.Messages.StateZone.ReadPayload(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.MultipleResponseAwaiter`1">
            <summary>
            An <see cref="T:AydenIO.Lifx.IResponseAwaiter"/> that waits for all responses before the user cancels, or it times out.
            </summary>
            <typeparam name="T">The response type.</typeparam>
        </member>
        <member name="M:AydenIO.Lifx.MultipleResponseAwaiter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.MultipleResponseAwaiter`1"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.MultipleResponseAwaiter`1.Task">
            <summary>Gets the awaitable task.</summary>
        </member>
        <member name="P:AydenIO.Lifx.MultipleResponseAwaiter`1.AydenIO#Lifx#IResponseAwaiter#Task">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MultipleResponseAwaiter`1.HandleResponse(AydenIO.Lifx.Response{AydenIO.Lifx.LifxMessage})">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MultipleResponseAwaiter`1.HandleException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.MultipleResponseDelegatedAwaiter`1">
            <summary>
            An <see cref="T:AydenIO.Lifx.IResponseAwaiter"/> that calls a delegate whenever a response is received, until the user cancels, or it times out.
            </summary>
            <typeparam name="T">The returned message type.</typeparam>
        </member>
        <member name="M:AydenIO.Lifx.MultipleResponseDelegatedAwaiter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.MultipleResponseDelegatedAwaiter`1"/> class.
            </summary>
        </member>
        <member name="E:AydenIO.Lifx.MultipleResponseDelegatedAwaiter`1.ResponseReceived">
            <summary>An event that is invoked for every response received.</summary>
        </member>
        <member name="P:AydenIO.Lifx.MultipleResponseDelegatedAwaiter`1.Task">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MultipleResponseDelegatedAwaiter`1.HandleResponse(AydenIO.Lifx.Response{AydenIO.Lifx.LifxMessage})">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MultipleResponseDelegatedAwaiter`1.HandleException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.MultizoneState">
            <summary>
            Represents a state of zones with colors for a multizone device.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.MultizoneState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.MultizoneState"/> class.
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.MultizoneState.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.MultizoneState"/> class.
            </summary>
            <param name="size">The number colors to initially create for the <see cref="P:AydenIO.Lifx.MultizoneState.Colors"/> list.</param>
        </member>
        <member name="P:AydenIO.Lifx.MultizoneState.ZoneCount">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.MultizoneState.Index">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.MultizoneState.Colors">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.ReadOnlyCollection`1">
            <summary>
            Wraps a collection to be read only.
            </summary>
            <typeparam name="T">The type of the collection's elements.</typeparam>
        </member>
        <member name="M:AydenIO.Lifx.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.ReadOnlyCollection`1"/> class.
            </summary>
            <param name="underlyingCollection">The underlying collection.</param>
        </member>
        <member name="P:AydenIO.Lifx.ReadOnlyCollection`1.Count">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.ReadOnlyCollection`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:AydenIO.Lifx.ReadOnlyCollection`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.ReadOnlyCollection`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.ReadOnlyCollection`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.ReadOnlyCollection`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.ReadOnlyCollection`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Response`1">
            <summary>
            Holds a grouping of an <see cref="T:System.Net.IPEndPoint"/> and a <typeparamref name="TMessage"/> message.
            </summary>
            <typeparam name="TMessage">The message type.</typeparam>
        </member>
        <member name="M:AydenIO.Lifx.Response`1.#ctor(System.Net.IPEndPoint,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.Response`1"/> class.
            </summary>
            <param name="endPoint">The <see cref="T:System.Net.IPEndPoint"/> that the message originated from.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:AydenIO.Lifx.Response`1.EndPoint">
            <summary>Gets the <see cref="T:System.Net.IPEndPoint"/> that the message originated from.</summary>
        </member>
        <member name="P:AydenIO.Lifx.Response`1.Message">
            <summary>Gets the message.</summary>
        </member>
        <member name="T:AydenIO.Lifx.ResponseFlags">
            <summary>
            Determines whether an acknowledgement, response, both, or neither are required.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.ResponseFlags.None">
            <summary>No response or acknowledgement is required.</summary>
        </member>
        <member name="F:AydenIO.Lifx.ResponseFlags.ResponseRequired">
            <summary>A response is required.</summary>
        </member>
        <member name="F:AydenIO.Lifx.ResponseFlags.AcknowledgementRequired">
            <summary>An acknowledgement is required.</summary>
        </member>
        <member name="T:AydenIO.Lifx.SingleResponseAwaiter`1">
            <summary>
            An <see cref="T:AydenIO.Lifx.IResponseAwaiter"/> that waits for a single response before completing.
            </summary>
            <typeparam name="TMessage">The message type.</typeparam>
        </member>
        <member name="M:AydenIO.Lifx.SingleResponseAwaiter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AydenIO.Lifx.SingleResponseAwaiter`1"/> class.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.SingleResponseAwaiter`1.Task">
            <summary>Gets the awaitable task.</summary>
        </member>
        <member name="P:AydenIO.Lifx.SingleResponseAwaiter`1.AydenIO#Lifx#IResponseAwaiter#Task">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.SingleResponseAwaiter`1.HandleResponse(AydenIO.Lifx.Response{AydenIO.Lifx.LifxMessage})">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.SingleResponseAwaiter`1.HandleException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.Utilities">
            <summary>
            Helper methods used by this library.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.Utilities.ResourceManager">
            <summary>Gets the resource manager for the library.</summary>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a number so it's falls in the range <paramref name="min"/> to <paramref name="max"/> inclusive.
            </summary>
            <param name="min">The lower bound.</param>
            <param name="max">The upper bound.</param>
            <param name="value">The value to clamp between the lower and upper bounds.</param>
            <returns>The value between the lower bound and the upper bound.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.MultiplyRoundClampUInt16(System.Double)">
            <summary>
            Multiplies a floating point value of the range 0.0 - 1.0 by the maximum value for an unsigned short, and clamps it to fit in the data type.
            </summary>
            <param name="f">The value to multiply, round, and clamp.</param>
            <returns>The value scaled to a ushort.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.MultiplyRoundClampUInt8(System.Double)">
            <summary>
            Multiplies a floating point value of the range 0.0 - 1.0 by the maximum value for a byte, and clamps it to fit in the data type.
            </summary>
            <param name="f">The value to multiply, round, and clamp.</param>
            <returns>The value scaled to a byte.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.BytesToHexString(System.Byte[],System.Nullable{System.Char})">
            <summary>
            Converts a sequence of bytes to a hexadecimal string, separated by <paramref name="sep"/>.
            </summary>
            <param name="bytes">The byte sequence to convert.</param>
            <param name="sep">The separator to put between bytes.</param>
            <returns>The bytes in hexadecimal representation.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.StringToFixedBuffer(System.String,System.Int32)">
            <summary>
            Encodes a string as UTF8 bytes into a buffer of a fixed size.
            </summary>
            <param name="str">The string to encode.</param>
            <param name="bufferSize">The size of the resulting buffer.</param>
            <returns>The string encoded as a sequence of bytes.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.BufferToString(System.Byte[])">
            <summary>
            Decodes a sequence of bytes as a string, up to the first \0.
            </summary>
            <param name="buffer">The buffer to decode.</param>
            <returns>The buffer decoded as a string.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.NanosecondsToTimeSpan(System.UInt64)">
            <summary>
            Converts a number of nanoseconds to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="ns">The nanoseconds.</param>
            <returns>The nanoseconds as a <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.TimeSpanToNanoseconds(System.TimeSpan)">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to a count of nanoseconds.
            </summary>
            <param name="ts">The nanoseconds.</param>
            <returns>The <see cref="T:System.TimeSpan"/> as a count of nanoseconds.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.NanosecondsToDateTime(System.UInt64)">
            <summary>
            Converts a number of nanoseconds since the unix epoch to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="ns">The nanoseconds.</param>
            <returns>A <see cref="T:System.DateTime"/> that is <paramref name="ns" /> nanoseconds from the unix epoch.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.DateTimeToNanoseconds(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to a number of nanoseconds.
            </summary>
            <param name="dt">The <see cref="T:System.DateTime"/> to convert.</param>
            <returns>The <see cref="T:System.DateTime"/> as the number of nanoseconds since the unix epoch.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.GetSignalStrength(System.Single)">
            <summary>
            Some LIFX devices report the <see cref="P:AydenIO.Lifx.ILifxWifiInfo.Signal"/> and <see cref="P:AydenIO.Lifx.ILifxHostInfo.Signal"/> as two different types. This function normalises them into a quantified range.
            </summary>
            <param name="signal">The raw signal value reported from the device.</param>
            <returns>A quantified representation of the signal value.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.GetResourceString(System.String)">
            <summary>
            Returns a resource string.
            </summary>
            <param name="stringName">The string name to get from the resources table.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:AydenIO.Lifx.Utilities.GetResourceString(System.String,System.Object[])">
            <summary>
            Returns a formatted resource string.
            </summary>
            <param name="stringName">The string name to get from the resources table.</param>
            <param name="args">Arguments used when the raw string is passed to <see cref="M:System.String.Format(System.String,System.Object[])"/>.</param>
            <returns>The formatted string.</returns>
        </member>
    </members>
</doc>
