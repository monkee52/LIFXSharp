<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AydenIO.Lifx</name>
    </assembly>
    <members>
        <member name="T:AydenIO.Lifx.ILifxColor">
            <summary>
            Represents a generic color type
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxColor.ToHsbk">
            <summary>
            Converts a color to the LIFX HSBK representation (Hue, Saturation, Brightness, Kelvin)
            </summary>
            <returns>The HSBK representation</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxColor.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <summary>
            Converts a LIFX HSBK color representation to a color.
            </summary>
            <param name="hsbk">The LIFX HSBK color</param>
        </member>
        <member name="T:AydenIO.Lifx.ILifxHsbkColor">
            <summary>
            Represents a LIFX HSBK color type
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHsbkColor.Hue">
            <summary>
            Hue, between 0 and 65535
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHsbkColor.Saturation">
            <summary>
            Saturation, between 0 and 65535
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHsbkColor.Brightness">
            <summary>
            Brightness, between 0 and 65535
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHsbkColor.Kelvin">
            <summary>
            Kelvin, between a minimum and maximum kelvin depending on the device
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxHsbkColor">
            <summary>
            Basic implementation of <c>ILifxHsbkColor</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxHsbkColor.Hue">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxHsbkColor.Saturation">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxHsbkColor.Brightness">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxHsbkColor.Kelvin">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxHsbkColor.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxHsbkColor.ToHsbk">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxHsbkColorComparer">
            <summary>
            Compares <c>ILifxHsbkColor</c>s
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxHsbkColorComparer.GetHashCode(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxHsbkColorComparer.Equals(AydenIO.Lifx.ILifxHsbkColor,AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxRgbColor">
            <summary>
            Represents an RGB color
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor.Red">
            <value>Gets or sets the red value for the color</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor.Green">
            <value>Gets or sets the green value for the color</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor.Blue">
            <value>Gets or sets the blue value for the color</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor.Kelvin">
            <value>Gets or sets the kelvin value for the color</value>
        </member>
        <member name="M:AydenIO.Lifx.LifxRgbColor.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxRgbColor.ToHsbk">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxRgbColor16Bit">
            <summary>
            Represents an RGB color with 16-bits of precision per channel
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor16Bit.Red">
            <value>Gets or sets the red value for the color</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor16Bit.Green">
            <value>Gets or sets the green value for the color</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor16Bit.Blue">
            <value>Gets or sets the blue value for the color</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxRgbColor16Bit.Kelvin">
            <value>Gets or sets the kelvin value for the color</value>
        </member>
        <member name="M:AydenIO.Lifx.LifxRgbColor16Bit.FromHsbk(AydenIO.Lifx.ILifxHsbkColor)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxRgbColor16Bit.ToHsbk">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.ILifxDevice">
            <summary>
            Represents a LIFX device
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxDevice.MacAddress">
            <value>Gets the MAC address of the device. Used as the primary identifier for the device</value>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetServices(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of the services that the device supports
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>A list of services supported by the device</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetHostInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets host info
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The host info</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetHostFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets host firmware
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The host firmware</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetWifiInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the wifi info
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The wifi info</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetWifiFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the wifi firmware
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The wifi firmware</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetPower(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device power state
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The device power state</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.SetPower(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the device power state
            </summary>
            <param name="power">The power state</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.PowerOn(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Powers on the device
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.PowerOff(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Powers off the device
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetLabel(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device label
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The device label</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.SetLabel(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the device label
            </summary>
            <param name="label">The device label</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetVersion(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device version
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The device version</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device info
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The device info</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetLocation(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device location
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The device location</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.SetLocation(AydenIO.Lifx.ILifxLocation,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the device location
            </summary>
            <param name="location">The location</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.GetGroup(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the device group
            </summary>
            <param name="forceRefresh">True to get from the device, false to use a cached value</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The device group</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxDevice.SetGroup(AydenIO.Lifx.ILifxGroup,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the device group
            </summary>
            <param name="group">The group</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="T:AydenIO.Lifx.ILifxInfraredLight">
            <summary>
            Represents a LIFX light device with infrared
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxInfraredLight.GetInfrared(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the light's infrared state
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The light's infrared state</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxInfraredLight.SetInfrared(System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's infrared state
            </summary>
            <param name="level">The brightness level of the infrared component</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="T:AydenIO.Lifx.ILifxLight">
            <summary>
            Represents a LIFX light device
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.GetState(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the light's state
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The light's state</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's effect waveform
            </summary>
            <param name="transient">True if the color is temporary, otherwise effect ends with light being the color</param>
            <param name="color">The color of the effect</param>
            <param name="period">Duration of a cycle</param>
            <param name="cycles">Number of cycles</param>
            <param name="skewRatio">Waveform skew</param>
            <param name="waveform">Waveform to use for the effect</param>
            <param name="rapid">Whether an acknowledgement is required</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's effect waveform
            </summary>
            <param name="transient">True if the color is temporary, otherwise effect ends with light being the color</param>
            <param name="color">The color of the effect</param>
            <param name="periodMs">Duration of a cycle, in milliseconds</param>
            <param name="cycles">Number of cycles</param>
            <param name="skewRatio">Waveform skew</param>
            <param name="waveform">Waveform to use for the effect</param>
            <param name="rapid">Whether an acknowledgement is required</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns></returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's effect waveform
            </summary>
            <param name="transient">True if the color is temporary, otherwise effect ends with light being the color</param>
            <param name="color">The color of the effect</param>
            <param name="period">Duration of a cycle</param>
            <param name="cycles">Number of cycles</param>
            <param name="skewRatio">Waveform skew</param>
            <param name="waveform">Waveform to use for the effect</param>
            <param name="setHue">Whether to use the hue value for the color</param>
            <param name="setSaturation">Whether to use the saturation value for the color</param>
            <param name="setBrightness">Whether to use the brightness value for the color</param>
            <param name="setKelvin">Whether to use the kelvin value for the color</param>
            <param name="rapid">Whether an acknowledgement is required</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's effect waveform
            </summary>
            <param name="transient">True if the color is temporary, otherwise effect ends with light being the color</param>
            <param name="color">The color of the effect</param>
            <param name="periodMs">Duration of a cycle, in milliseconds</param>
            <param name="cycles">Number of cycles</param>
            <param name="skewRatio">Waveform skew</param>
            <param name="waveform">Waveform to use for the effect</param>
            <param name="setHue">Whether to use the hue value for the color</param>
            <param name="setSaturation">Whether to use the saturation value for the color</param>
            <param name="setBrightness">Whether to use the brightness value for the color</param>
            <param name="setKelvin">Whether to use the kelvin value for the color</param>
            <param name="rapid">Whether an acknowledgement is required</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetPower(System.Boolean,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's power state
            </summary>
            <param name="power">The power state</param>
            <param name="duration">How long to transition over</param>
            <param name="rapid">Whether an acknowledgement is required</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetPower(System.Boolean,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's power state
            </summary>
            <param name="power">The power state</param>
            <param name="durationMs">How long to transition over, in milliseconds</param>
            <param name="rapid">Whether an acknowledgement is required</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetColor(AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's color
            </summary>
            <param name="color">The color</param>
            <param name="duration">How long to transition over</param>
            <param name="rapid">Whether an acknowledgement is required</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxLight.SetColor(AydenIO.Lifx.ILifxColor,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the light's color
            </summary>
            <param name="color">The color</param>
            <param name="durationMs">How long to transition over, in milliseconds</param>
            <param name="rapid">Whether an acknowledgement is required</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="T:AydenIO.Lifx.ILifxMultizoneLight">
            <summary>
            Represents a LIFX multizone light device
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxProduct">
            <summary>
            Represents features of a device
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.VendorId">
            <value>Gets the vendor ID</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.VendorName">
            <value>Gets the vendor name</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.ProductId">
            <value>Gets the product ID</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.ProductName">
            <value>Gets the device product name</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.SupportsColor">
            <value>Gets whether the device supports color</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.SupportsInfrared">
            <value>Gets whether the device supports infrared</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.IsMultizone">
            <value>Gets whether the device is a multizone device</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.IsChain">
            <value>Gets whether the device is a chained device</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.IsMatrix">
            <value>Gets whether the device is a matrix device</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.MinKelvin">
            <value>Gets the minimum kelvin value for the device</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxProduct.MaxKelvin">
            <value>Gets the maximum kelvin value for the device</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxResponseAwaiter">
            <summary>
            Allows response(s) to be handled when received on the socket
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxResponseAwaiter.Task">
            <value>Gets the awaitable task</value>
        </member>
        <member name="M:AydenIO.Lifx.ILifxResponseAwaiter.HandleResponse(AydenIO.Lifx.LifxResponse)">
            <summary>
            Called whenever a response is received
            </summary>
            <param name="response">The response that was received</param>
        </member>
        <member name="M:AydenIO.Lifx.ILifxResponseAwaiter.HandleException(System.Exception)">
            <summary>
            Called whenever an exception is generated while waiting for a response
            </summary>
            <param name="exception">The exception that was generated</param>
        </member>
        <member name="T:AydenIO.Lifx.LifxVirtualInfraredLight">
            <summary>
            Represents a virtual LIFX light with infrared support
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualInfraredLight.SupportsInfrared">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualInfraredLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress)">
            <summary>
            Creates a new virtual LIFX light with infrared support
            </summary>
            <param name="lifx">The <c>LifxNetwork</c> to associated this virtual light with</param>
            <param name="macAddress">The <c>MacAddress</c> of this virtual light</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualInfraredLight.GetInfrared(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualInfraredLight.SetInfrared(System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxApplicationRequest">
            <summary>
            Controls how/when multizone devices apply color changes
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxApplicationRequest.NoApply">
            <summary>
            Don't apply the requested changes until a message with Apply or ApplyOnly is sent
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxApplicationRequest.Apply">
            <summary>
            Apply the changes immediately and apply any pending changes
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxApplicationRequest.ApplyOnly">
            <summary>
            Ignore the requested changes in this message and only apply pending changes
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxDevice">
            <summary>
            Represents a LIFX device
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.Lifx">
            <value>Gets the associated <c>LifxNetwork</c> for the device</value>
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress,System.Net.IPEndPoint,AydenIO.Lifx.ILifxVersion)">
            <summary>
            Creates a LIFX device class
            </summary>
            <param name="lifx">The <c>LifxNetwork</c> the device belongs to</param>
            <param name="macAddress">The MAC address of the device</param>
            <param name="endPoint">The <c>IPEndPoint</c> of the device</param>
            <param name="version">The version of the device</param>
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.VendorId">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.VendorName">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.ProductId">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.ProductName">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.SupportsColor">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.SupportsInfrared">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.IsMultizone">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.IsChain">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.IsMatrix">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.MinKelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.MaxKelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.EndPoint">
            <value>Gets the <c>IPEndPoint</c> of the device</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.MacAddress">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxDevice.LastSeen">
            <value>Gets the last time the device was seen by discovery</value>
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetServices(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetHostInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetHostFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.SetHostFirmwareCachedValue(AydenIO.Lifx.ILifxHostFirmware)">
            <summary>
            Sets the internal cached value for host firmware, used when different firmware versions have different APIs
            </summary>
            <param name="hostFirmware">The host firmware for the device</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetWifiInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetWifiFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetPower(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.SetPower(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.PowerOn(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.PowerOff(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetLabel(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.SetLabel(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetVersion(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetLocation(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.SetLocation(AydenIO.Lifx.ILifxLocation,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.GetGroup(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.SetGroup(AydenIO.Lifx.ILifxGroup,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.Ping(System.Collections.Generic.IEnumerable{System.Byte},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Request a device to echo back a specific payload
            </summary>
            <param name="payload">The payload to be echoed</param>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>Whether the device responded, and whether the response matched the payload</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxDevice.Ping(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Request a device to echo back a random payload
            </summary>
            <param name="timeoutMs">How long before the call times out, in milliseconds</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>Whether the device responded, and whether the response matched the payload</returns>
        </member>
        <member name="T:AydenIO.Lifx.LifxDeviceDiscoveredEventArgs">
            <summary>
            Event arguments for when a device is discovered
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxDeviceDiscoveredEventArgs.Device">
            <value>Gets the device that has been discovered</value>
        </member>
        <member name="T:AydenIO.Lifx.LifxDeviceLostEventArgs">
            <summary>
            Event arguments for when a device has been lost
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxDeviceLostEventArgs.MacAddress">
            <value>Gets the MAC address of the device that has been lost</value>
        </member>
        <member name="T:AydenIO.Lifx.LifxInfraredLight">
            <summary>
            Represents a LIFX light device with infrared
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxInfraredLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress,System.Net.IPEndPoint,AydenIO.Lifx.ILifxVersion)">
            <summary>
            Creates a LIFX light class that supports infrared
            </summary>
            <param name="lifx">The <c>LifxNetwork</c> the device belongs to</param>
            <param name="macAddress">The MAC address of the device</param>
            <param name="endPoint">The <c>IPEndPoint</c> of the device</param>
            <param name="version">The version of the device</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxInfraredLight.GetInfrared(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxInfraredLight.SetInfrared(System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxLight">
            <summary>
            Represents a LIFX light device
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress,System.Net.IPEndPoint,AydenIO.Lifx.ILifxVersion)">
            <summary>
            Creates a LIFX device class
            </summary>
            <param name="lifx">The <c>LifxNetwork</c> the device belongs to</param>
            <param name="macAddress">The MAC address of the device</param>
            <param name="endPoint">The <c>IPEndPoint</c> of the device</param>
            <param name="version">The version of the device</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.GetState(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.GetPower(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetPower(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetPower(System.Boolean,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetPower(System.Boolean,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetColor(AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxLight.SetColor(AydenIO.Lifx.ILifxColor,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxMessageType">
            <summary>
            Possible message types for the LIFX protocol
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType._internal_unknown_">
            <summary>A message that hasn't been decoded yet. Used to prevent the <c>LifxMessage.FromBytes</c> method from throwing an exception during decoding</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetService">
            <summary>Sent by a client to acquire responses from all devices on the local network.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateService">
            <summary>Provides the device Service and port.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetHostInfo">
            <summary>Get Host MCU information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateHostInfo">
            <summary>Response to GetHostInfo message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetHostFirmware">
            <summary>Gets Host MCU firmware information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateHostFirmware">
            <summary>Response to GetHostFirmware message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetWifiInfo">
            <summary>Get Wifi subsystem information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateWifiInfo">
            <summary>Response to GetWifiInfo message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetWifiFirmware">
            <summary>Get Wifi subsystem firmware.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateWifiFirmware">
            <summary>Response to GetWifiFirmware message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetPower">
            <summary>Get device power level.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetPower">
            <summary>Set device power level. </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StatePower">
            <summary>Response to GetPower message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetLabel">
            <summary>Get device label.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetLabel">
            <summary>Set the device label text.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateLabel">
            <summary>Response to GetLabel message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetVersion">
            <summary>Get the hardware version.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateVersion">
            <summary>Provides the hardware version of the device.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetInfo">
            <summary>Get run-time information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateInfo">
            <summary>Response to GetInfo message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.Acknowledgement">
            <summary>Response to any message sent with _ack_required_ set to 1.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetLocation">
            <summary>Ask the bulb to return its location information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetLocation">
            <summary>Set the device location.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateLocation">
            <summary>Device location.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetGroup">
            <summary>Ask the bulb to return its group membership information.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetGroup">
            <summary>Set the device group.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateGroup">
            <summary>Device group.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.EchoRequest">
            <summary>Request an arbitrary payload be echoed back.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.EchoResponse">
            <summary>Response to EchoRequest message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightGet">
            <summary>Sent by a client to obtain the light state.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightSetColor">
            <summary>Sent by a client to change the light state.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightSetWaveform">
            <summary>Apply an effect to the bulb.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightSetWaveformOptional">
            <summary>Optionally set effect parameters. Same as SetWaveform but allows some parameters to be set from the current value on device.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightState">
            <summary>Sent by a device to provide the current light state.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightGetPower">
            <summary>Sent by a client to obtain the power level.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightSetPower">
            <summary>Sent by a client to change the light power level.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightStatePower">
            <summary>Sent by a device to provide the current power level.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightGetInfrared">
            <summary>Gets the current maximum power level of the Infrared channel.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightStateInfrared">
            <summary>This message is returned from a GetInfrared message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.LightSetInfrared">
            <summary>Send this message to alter the current maximum brightness for the infrared channel.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetExtendedColorZones">
            <summary>This messages lets you change all the zones on your device in one message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetExtendedColorZones">
            <summary>This message will ask the device to return a StateExtendedColorZones containing all of it's colors.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateExtendedColorZones">
            <summary>Returned after you send the device a GetExtendedColorZones or SetExtendedColorZones message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetColorZones">
            <summary>This message is used for changing the color of either a single or multiple zones.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetColorZones">
            <summary>GetColorZones is used to request the zone colors for a range of zones.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateZone">
            <summary>The StateZone message represents the state of a single zone.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateMultiZone">
            <summary>The StateMultiZone message represents the state of eight consecutive zones in a single message.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetDeviceChain">
            <summary>This message returns information about the tiles in the chain.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateDeviceChain">
            <summary>Response to GetDeviceChain</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetUserPosition">
            <summary>Used to tell each tile what their position is.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetTileState64">
            <summary>Get the state of 64 pixels in the tile in a rectangle that has a starting point and width.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateTileState64">
            <summary>Returned from a GetTileState64 and provides all the pixels in the specified rectangle for that tile.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetTileState64">
            <summary>This lets you set 64 pixels.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetMultiZoneEffect">
            <summary>This messages lets you control a firmware effect on your device.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetMultiZoneEffect">
            <summary>Asks the device to return a StateMultiZoneEffect to tell you the current state of firmware effects on the device</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateMultiZoneEffect">
            <summary>This has the same fields as a SetMultiZoneEffect and is returned from a GetMultiZoneEffect or a SetMultiZoneEffect.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.SetTileEffect">
            <summary>This messages lets you control a firmware effect on your LIFX Tile.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.GetTileEffect">
            <summary>Asks the device to return a StateMultiZoneEffect to tell you the current state of firmware effects on the device.</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxMessageType.StateTileEffect">
            <summary>It describes the current state of the effects on the device.</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxMultipleResponseAwaiter`1">
            <summary>
            An <c>ILifxResponseAwaiter</c> that waits for all responses before the user cancels, or it times out
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AydenIO.Lifx.LifxMultipleResponseAwaiter`1.Task">
            <value>Gets the awaitable task</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxMultipleResponseAwaiter`1.AydenIO#Lifx#ILifxResponseAwaiter#Task">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxMultipleResponseAwaiter`1.#ctor">
            <summary>
            Creates an awaiter that waits for all responses before the user cancels, or it times out
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxMultipleResponseAwaiter`1.HandleResponse(AydenIO.Lifx.LifxResponse)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxMultipleResponseAwaiter`1.HandleException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxMultipleResponseDelegatedAwaiter`1">
            <summary>
            A <c>ILifxResponseAwaiter</c> that calls a delegate whenever a response is received, until the user cancels, or it times out
            </summary>
            <typeparam name="T">The returned message type</typeparam>
        </member>
        <member name="M:AydenIO.Lifx.LifxMultipleResponseDelegatedAwaiter`1.#ctor">
            <summary>
            Creates an awaiter that calls a delegate when responses are received before cancelled or timed out
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxMultipleResponseDelegatedAwaiter`1.HandleResponse(AydenIO.Lifx.LifxResponse)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxMultipleResponseDelegatedAwaiter`1.HandleException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxMultizoneLight.MaxLifxMultizone">
            <value>The current maximum number of zones in a LIFX MultiZone device</value>
        </member>
        <member name="T:AydenIO.Lifx.LifxNetwork">
            <summary>
            Common class that connects C# to the LIFX protocol
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxNetwork.LifxPort">
            <summary>
            The default LIFX LAN protocol port
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxNetwork.SourceId">
            <value>An identifier to distinguish this <c>LifxNetwork</c> from others in the protocol</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxNetwork.DiscoveryInterval">
            <value>Gets or sets how long to wait between sending out discovery packets</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxNetwork.ReceiveTimeout">
            <value>Gets or sets the default time to wait before a call times out, in milliseconds</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxNetwork.LifxBroadcast">
            <value>Gets the LIFX Broadcast target</value>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the <c>LifxNetwork</c>
            </summary>
            <param name="discoveryInterval">The default discovery interval <see cref="P:AydenIO.Lifx.LifxNetwork.DiscoveryInterval" /></param>
            <param name="rxTimeout">The default receive timeout <see cref="P:AydenIO.Lifx.LifxNetwork.ReceiveTimeout" /></param>
        </member>
        <member name="E:AydenIO.Lifx.LifxNetwork.DeviceDiscovered">
            <summary>
            Event handler for when a device has been discovered during discovery
            </summary>
        </member>
        <member name="E:AydenIO.Lifx.LifxNetwork.DeviceLost">
            <summary>
            Event handler for when a device hasn't been seen for a while during discovery
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxNetwork.Devices">
            <value>Gets a list of all devices that have been discovered, or explicitly found</value>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.StartDiscovery">
            <summary>
            Starts the discovery thread
            </summary>
            <returns>True if the call started the thread, otherwise the thread was not in a state to start</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.StopDiscovery">
            <summary>
            Synchronous version of <c>StopDiscovery</c>
            </summary>
            <returns>True if the call stopped the thread, otherwise the thread was not in a state to stop</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.StopDiscoveryAsync">
            <summary>
            Stops the discovery thread
            </summary>
            <returns>True if the call stopped the thread, otherwise the thread was already stopped.</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.DiscoverOnce(System.Threading.CancellationToken)">
            <summary>
            Sends a single discovery packet
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.DiscoveryWorker">
            <summary>
            Thread worker that calls DiscoverOnce repeatedly every <c>DiscoveryInterval</c> milliseconds
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.HasDevice(AydenIO.Lifx.MacAddress)">
            <summary>
            Returns whether a given MAC address has been found, and is a device
            </summary>
            <param name="macAddress">The MAC address to look up</param>
            <returns>Whether the device has been found</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.GetDevice(AydenIO.Lifx.MacAddress,System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a device with a specific <c>MacAddress</c>
            </summary>
            <param name="macAddress">The mac address to find</param>
            <param name="port">The port to search</param>
            <param name="timeoutMs">How long to wait for a response before the call times out</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The device</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.GetDevice(System.Net.IPEndPoint,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a device with a specific <c>MacAddress</c>
            </summary>
            <param name="endPoint">The endpoint to search</param>
            <param name="timeoutMs">How long to wait for a response before the call times out</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns>The device</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.GetDevice(System.Net.IPAddress,System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a device with at an IP address and port
            </summary>
            <param name="address">IP address to search</param>
            <param name="port">The port to search</param>
            <param name="timeoutMs">How long to wait for a response before the call times out</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns></returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.GetDevice(System.String,System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a device using an IP or MAC address, and a port
            </summary>
            <param name="address">The IP or MAC address to search</param>
            <param name="port">The port to search</param>
            <param name="timeoutMs">How long to wait for a response before the call times out</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <returns></returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendCommon(System.Net.IPEndPoint,AydenIO.Lifx.LifxMessage)">
            <summary>
            Converts a message to bytes, and sends it.
            </summary>
            <param name="endPoint">The destination, or null if message is to be broadcast</param>
            <param name="message">The message</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SetMessageHeaderCommon(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage,AydenIO.Lifx.LifxeResponseFlags)">
            <summary>
            Sets common header fields of the message
            </summary>
            <param name="device">The device to target, or null if message is to be broadcast</param>
            <param name="message">The message</param>
            <param name="responseFlags">The type of response required from the device</param>
            <returns>An 8-bit sequence number</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.Send(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage)">
            <summary>
            Sends a message with no response
            </summary>
            <param name="device">The device to target</param>
            <param name="message">The message</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithResponseCommon(System.Net.IPEndPoint,AydenIO.Lifx.LifxMessage,AydenIO.Lifx.ILifxResponseAwaiter,System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends a message, and returns the response
            </summary>
            <param name="endPoint">The endpoint to target</param>
            <param name="message">The message</param>
            <param name="awaiter">The awaiter that handles the response</param>
            <param name="timeoutMs">How long before the call times out if there is no response</param>
            <param name="isAcknowledgement">Whether the return type is <c>Messages.Acknowledgement</c></param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithResponse``1(System.Net.IPEndPoint,AydenIO.Lifx.LifxMessage,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and returns the response
            </summary>
            <typeparam name="T">The returned <c>LifxMessage</c> message type</typeparam>
            <param name="endPoint">The endpoint to target</param>
            <param name="message">The message</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <param name="timeoutMs">How long before the call times out if there is no response</param>
            <returns>The returned message</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithMultipleResponse``1(System.Net.IPEndPoint,AydenIO.Lifx.LifxMessage,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and returns all responses after timeout
            </summary>
            <typeparam name="T">The returned <c>LifxMessage</c> message's type</typeparam>
            <param name="endPoint">The endpoint to target</param>
            <param name="message">The message</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <param name="timeoutMs">How long before the call takes before the responses are returned</param>
            <returns>The returned messages</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithMultipleResponseDelegated``1(System.Net.IPEndPoint,AydenIO.Lifx.LifxMessage,System.Action{AydenIO.Lifx.LifxResponse{``0}},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and invokes a handler for each response received
            </summary>
            <typeparam name="T">The returned <c>LifxMessage</c> message's type</typeparam>
            <param name="endPoint">The endpoint to target</param>
            <param name="message">The message</param>
            <param name="handler">The delegate to invoke for each response</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <param name="timeoutMs">How long before the call takes before the call completes</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithResponse``1(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and returns the response
            </summary>
            <typeparam name="T">The returned <c>LifxMessage</c> message type</typeparam>
            <param name="device">The device to target</param>
            <param name="message">The message</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <param name="timeoutMs">How long before the call times out if there is no response</param>
            <returns>The returned message</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithMultipleResponse``1(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and returns all responses after timeout
            </summary>
            <typeparam name="T">The returned <c>LifxMessage</c> message's type</typeparam>
            <param name="device">The device to target</param>
            <param name="message">The message</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <param name="timeoutMs">How long before the call takes before the responses are returned</param>
            <returns>The returned messages</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithMultipleResponseDelegated``1(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage,System.Action{``0},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and invokes a handler for each response received
            </summary>
            <typeparam name="T">The returned <c>LifxMessage</c> message's type</typeparam>
            <param name="device">The device to target</param>
            <param name="message">The message</param>
            <param name="handler">The delegate to invoke for each response</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <param name="timeoutMs">How long before the call takes before the responses are returned</param>
            <returns>The returned messages</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.SendWithAcknowledgement(AydenIO.Lifx.LifxDevice,AydenIO.Lifx.LifxMessage,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sends a message, and awaits an acknowledgement
            </summary>
            <param name="device">The device to target</param>
            <param name="message">The message</param>
            <param name="cancellationToken">Cancellation token to force the function to return its immediate result</param>
            <param name="timeoutMs">How long before the call times out if there is no response</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.RegisterVirtualDevice(AydenIO.Lifx.LifxVirtualDevice)">
            <summary>
            Registers a virtual device with this LIFX network
            </summary>
            <param name="device">The virtual device</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.GetFeaturesForProduct(AydenIO.Lifx.ILifxVersion)">
            <summary>
            Gets the features supported by a device, given a vendor and product ID
            </summary>
            <param name="version">The LIFX version</param>
            <returns>An object containing the supported features for that product</returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.ProductSupportsExtendedMultizoneApi(AydenIO.Lifx.ILifxVersion,AydenIO.Lifx.ILifxHostFirmware)">
            <summary>
            Gets whether a device supports the extended multizone API
            </summary>
            <param name="version">The LIFX device's version</param>
            <param name="hostFirmware">The LIFX device's host firmware</param>
            <returns></returns>
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxNetwork.Dispose">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxService">
            <summary>
            Possible (public) service types for devices
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxService.Udp">
            <summary>The LIFX Protocol utilizes UDP/IP for all messages covered by the public API</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxSignalStrength">
            <summary>
            Represents various levels of signal strengths from normalised <c>Signal</c> properties.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSignalStrength.None">
            <summary>No signal</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSignalStrength.Poor">
            <summary>Poor signal strength</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSignalStrength.Fair">
            <summary>Fair signal strength</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSignalStrength.Good">
            <summary>Good signal strength</summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxSignalStrength.Excellent">
            <summary>Excellent signal strength</summary>
        </member>
        <member name="T:AydenIO.Lifx.LifxSingleResponseAwaiter`1">
            <summary>
            An <c>ILifxResponseAwaiter</c> that waits for a single response before completing
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:AydenIO.Lifx.LifxSingleResponseAwaiter`1.Task">
            <value>Gets the awaitable task</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxSingleResponseAwaiter`1.AydenIO#Lifx#ILifxResponseAwaiter#Task">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxSingleResponseAwaiter`1.#ctor">
            <summary>
            Creates an awaiter that waits for a single response
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.LifxSingleResponseAwaiter`1.HandleResponse(AydenIO.Lifx.LifxResponse)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxSingleResponseAwaiter`1.HandleException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxVirtualDevice">
            <summary>
            Represents a virtual LIFX device
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.Lifx">
            <value>Gets the <c>LifxNetwork></c> this virtual device is associated with</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.MacAddress">
            <value>Gets the virtual MAC address for the device</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.VendorName">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.ProductName">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.SupportsColor">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.SupportsInfrared">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.IsMultizone">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.IsChain">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.IsMatrix">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.MinKelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.MaxKelvin">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress)">
            <summary>
            Creates a new virtual LIFX device
            </summary>
            <param name="lifx">The <c>LifxNetwork</c> to associated this virtual device with</param>
            <param name="macAddress">The <c>MacAddress</c> of this virtual device</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetServices(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetHostInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetWifiInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetHostFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetWifiFirmware(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.StartTime">
            <value>Gets or sets the time that this virtual device was started</value>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.LastDownTime">
            <value>Gets or sets the time that this virtual device was last stopped</value>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetInfo(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.VendorId">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.ProductId">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualDevice.Version">
            <value>Gets or sets the "hardware" version of this virtual device</value>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetVersion(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.PowerOff(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.PowerOn(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetLocation(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.SetLocation(AydenIO.Lifx.ILifxLocation,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetGroup(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.SetGroup(AydenIO.Lifx.ILifxGroup,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetLabel(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.SetLabel(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.GetPower(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualDevice.SetPower(System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxVirtualLight">
            <summary>
            Represents a virtual LIFX light
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualLight.SupportsColor">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualLight.MinKelvin">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualLight.MaxKelvin">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress)">
            <summary>
            Creates a new virtual LIFX light
            </summary>
            <param name="lifx">The <c>LifxNetwork</c> to associated this virtual light with</param>
            <param name="macAddress">The <c>MacAddress</c> of this virtual light</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.GetState(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetColor(AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetPower(System.Boolean,System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.TimeSpan,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetWaveform(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetWaveformOptional(System.Boolean,AydenIO.Lifx.ILifxColor,System.UInt32,System.Single,System.Int16,AydenIO.Lifx.LifxWaveform,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetColor(AydenIO.Lifx.ILifxColor,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualLight.SetPower(System.Boolean,System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxVirtualMultizoneLight">
            <summary>
            Represents a virtual LIFX multizone light
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualMultizoneLight.SupportsColor">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualMultizoneLight.SupportsInfrared">
            <inheritdoc />
        </member>
        <member name="P:AydenIO.Lifx.LifxVirtualMultizoneLight.IsMultizone">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.#ctor(AydenIO.Lifx.LifxNetwork,AydenIO.Lifx.MacAddress)">
            <summary>
            Creates a new virtual LIFX multizone light
            </summary>
            <param name="lifx">The <c>LifxNetwork</c> to associated this virtual light with</param>
            <param name="macAddress">The <c>MacAddress</c> of this virtual light</param>
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.GetMultizoneState(System.UInt16,System.UInt16,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.SetMultizoneState(AydenIO.Lifx.LifxApplicationRequest,System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.TimeSpan,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.SetMultizoneState(System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.TimeSpan,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.SetMultizoneState(AydenIO.Lifx.LifxApplicationRequest,System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.UInt32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.LifxVirtualMultizoneLight.SetMultizoneState(System.UInt16,System.Collections.Generic.IEnumerable{AydenIO.Lifx.ILifxColor},System.UInt32,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.LifxWaveform">
            <summary>
            Possible waveform types for LIFX light bulb effects
            <see href="https://lan.developer.lifx.com/docs/waveforms" />
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWaveform.Saw">
            <summary>
            Light interpolates linearly from current color to color.
            Duration of each cycle lasts for period milliseconds.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWaveform.Sine">
            <summary>
            The color will cycle smoothly from current color to color and then end back at current color.
            The duration of one cycle will last for period milliseconds.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWaveform.HalfSine">
            <summary>
            Light interpolates smoothly from current color to color.
            Duration of each cycle lasts for period milliseconds.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWaveform.Triangle">
            <summary>
            Light interpolates linearly from current color to color, then back to current color.
            Duration of each cycle lasts for period milliseconds.
            </summary>
        </member>
        <member name="F:AydenIO.Lifx.LifxWaveform.Pulse">
            <summary>
            The color will be set immediately to color, then to current color after the duty cycle fraction expires.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.MacAddress">
            <summary>
            Represents a MAC address
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.MacAddress.Broadcast">
            <value>Gets the standard Ethernet broadcast MAC address</value>
        </member>
        <member name="P:AydenIO.Lifx.MacAddress.IsBroadcast">
            <value>Gets whether this MAC address is the broadcast mac address</value>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.GetBytes">
            <summary>
            Get the MAC address as a byte array
            </summary>
            <returns>The MAC address as a byte array</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.#ctor(System.Byte[])">
            <summary>
            Creates a MAC address from a byte array
            </summary>
            <param name="bytes">The byte array</param>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.TryParse(System.String,AydenIO.Lifx.MacAddress@)">
            <summary>
            Attempt to parse a string as a MAC address. Matches aabbccddeeff, aa:bb:cc:dd:ee:ff, aa-bb-cc-dd-ee-ff
            </summary>
            <param name="macAddress">The string representation of the MAC address</param>
            <param name="destination">An out to the resulting <c>MacAddress</c></param>
            <returns>Whether the parsing was successful</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.Parse(System.String)">
            <summary>
            Attempt to parse a string as a MAC address. Matches aabbccddeeff, aa:bb:cc:dd:ee:ff, aa-bb-cc-dd-ee-ff
            </summary>
            <param name="macAddress">The string representation of the MAC address</param>
            <returns>The resulting MAC address</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.CreateLocallyAdministeredAddress">
            <summary>
            Creates a random locally administered MAC address
            </summary>
            <returns>The random MAC address</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.ToString(System.String,System.Boolean)">
            <summary>
            Convert the MAC address to a string
            </summary>
            <param name="style">Which style to use</param>
            <param name="uppercase">Whether it should be uppercase</param>
            <returns>A string representation of the MAC address</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.ToString">
            <summary>
            Convert the MAC address to a string
            </summary>
            <returns>A string representation of the MAC address</returns>
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.Equals(AydenIO.Lifx.MacAddress)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.op_Equality(AydenIO.Lifx.MacAddress,AydenIO.Lifx.MacAddress)">
            <inheritdoc />
        </member>
        <member name="M:AydenIO.Lifx.MacAddress.op_Inequality(AydenIO.Lifx.MacAddress,AydenIO.Lifx.MacAddress)">
            <inheritdoc />
        </member>
        <member name="T:AydenIO.Lifx.ILifxApplicationRequest">
            <summary>
            This type allows you to provide hints to the device about how the changes you make should be performed.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxApplicationRequest.Apply">
            <value>How the change should be performed.</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorMultiZoneState">
            <summary>
            Represents multiple zones on a MultiZone device
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorZoneCount">
            <summary>
            Represents the count of zones in a multizone device
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxColorZoneCount.ZoneCount">
            <value>The number of zones the device has</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorZoneIndex">
            <summary>
            Represents the first index of states of zones on multizone devices.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxColorZoneIndex.Index">
            <value>The index field is the zone we start applying the colors from. The first zone is 0.</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorZoneRange">
            <summary>
            Represents a range of zones covered by a multizone state message.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxColorZoneRange.StartIndex">
            <value>The index of the first zone.</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxColorZoneRange.EndIndex">
            <value>The index of the last zone.</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorZones">
            <summary>
            Common properties for set, and state messages for multizone lights
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxColorZones.Colors">
            <value>The colors is 8/82 HSBK values and number of colors from this array will be applied sequentially from the <c>Index</c>'d zone on the device.</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxColorZoneState">
            <summary>
            Represents the state of a single zone on a multizone device
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxEcho">
            <summary>
            Common properties for <c>EchoRequest</c> and <c>EchoResponse</c>
            </summary>
        </member>
        <member name="M:AydenIO.Lifx.ILifxEcho.GetPayload">
            <summary>
            Gets the payload of the EchoRequest or EchoResponse
            </summary>
            <returns>The payload</returns>
        </member>
        <member name="M:AydenIO.Lifx.ILifxEcho.SetPayload(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Sets the payload of the EchoRequest or EchoResponse
            </summary>
            <param name="payload">The payload</param>
        </member>
        <member name="T:AydenIO.Lifx.ILifxGroup">
            <summary>
            Represents a group membership for a device.
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxGroup.Group">
            <value>The group identifier</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxGroup.Label">
            <value>The label for the group</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxGroup.UpdatedAt">
            <value>When the group membership information was updated</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxHostFirmware">
            <summary>
            Common properties for <c>Messages.StateHostFirmware</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostFirmware.Build">
            <value>Firmware build time</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostFirmware.VersionMinor">
            <value>Firmware minor version</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostFirmware.VersionMajor">
            <value>Firmware major version</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxHostInfo">
            <summary>
            Common properties for <c>Messages.StateHostInfo</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostInfo.Signal">
            <value>Radio receive signal strength</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostInfo.TransmittedBytes">
            <value>Transmitted bytes since power on</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxHostInfo.ReceivedBytes">
            <value>Received bytes since power on</value>
        </member>
        <member name="M:AydenIO.Lifx.ILifxHostInfo.GetSignalStrength">
            <summary>
            Returns the signal strength as a normalised value.
            </summary>
            <returns>The quality of the received signal</returns>
        </member>
        <member name="T:AydenIO.Lifx.ILifxInfo">
            <summary>
            Common properties for <c>Messages.StateInfo</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxInfo.Time">
            <value>Current time</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxInfo.Uptime">
            <value>Time since last power on</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxInfo.Downtime">
            <value>Last power off period (5-second accuracy)</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxInfrared">
            <summary>
            Common properties for <c>Messages.SetInfrared</c> and <c>Messages.StateInfrared</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxInfrared.Level">
            <value>The current maximum setting for the infrared channel</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxLabel">
            <summary>
            Common properties for <c>Messages.SetLabel</c> and <c>Messages.StateLabel</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxLabel.Label">
            <value>The device label</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxLightState">
            <summary>
            Common properties for <c>Messages.LightState</c>
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.ILifxLocation">
            <summary>
            Common properties for <c>Messages.SetLocation</c> and <c>Messages.StateLocation</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxLocation.Location">
            <value>The location identifier</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxLocation.Label">
            <value>The label for the location</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxLocation.UpdatedAt">
            <value>When the location membership information was updated</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxPower">
            <summary>
            Common properties for <c>Messages.SetPower</c>, <c>Messages.StatePower</c>, <c>Messages.LightSetPower</c>, <c>Messages.LightStatePower</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxPower.PoweredOn">
            <value>Whether the device is powered on</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxService">
            <summary>
            Common properties for <c>Messages.StateService</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxService.Service">
            <value>The service type</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxService.Port">
            <value>The port that the service is on</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxTransition">
            <summary>
            Common properties for transitionable messages <c>Messages.LightSetPower</c> and <c>Messages.LightSetColor</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxTransition.Duration">
            <value>The duration of the transition</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxVersion">
            <summary>
            Common properties for <c>Messages.StateVersion</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxVersion.VendorId">
            <value>The vendor identifier</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxVersion.ProductId">
            <value>The product identifier</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxVersion.Version">
            <value>The hardware version</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxWaveform">
            <summary>
            Common properties for <c>Messages.LightSetWaveform</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveform.Transient">
            <value>True if the color does not persist.</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveform.Period">
            <value>Duration of a cycle</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveform.Cycles">
            <value>Number of cycles</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveform.SkewRatio">
            <value>Waveform skew</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveform.Waveform">
            <value>The waveform type</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxWaveformOptional">
            <summary>
            Common properties for <c>Messages.LightSetWaveformOptional</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveformOptional.SetHue">
            <value>True to use end color's hue</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveformOptional.SetSaturation">
            <value>True to use end color's saturation</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveformOptional.SetBrightness">
            <value>True to use end color's brightness</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWaveformOptional.SetKelvin">
            <value>True to use end color's kelvin</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxWifiFirmware">
            <summary>
            Common properties for <c>Messages.StateWifiFirmware</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiFirmware.Build">
            <value>Firmware build time</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiFirmware.VersionMinor">
            <value>Firmware minor version</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiFirmware.VersionMajor">
            <value>Firmware major version</value>
        </member>
        <member name="T:AydenIO.Lifx.ILifxWifiInfo">
            <summary>
            Common properties for <c>Messages.StateWifiInfo</c>
            </summary>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiInfo.Signal">
            <value>Radio receive signal strength</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiInfo.TransmittedBytes">
            <value>Transmitted bytes since power on</value>
        </member>
        <member name="P:AydenIO.Lifx.ILifxWifiInfo.ReceivedBytes">
            <value>Received bytes since power on</value>
        </member>
        <member name="M:AydenIO.Lifx.ILifxWifiInfo.GetSignalStrength">
            <summary>
            Returns the signal strength as a normalised value.
            </summary>
            <returns>The quality of the received signal</returns>
        </member>
        <member name="T:AydenIO.Lifx.Messages.Acknowledgement">
            <summary>
            Response to any message sent with _ack_required_ set to 1
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.EchoRequest">
            <summary>
            Request an arbitrary payload be echoed back.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.EchoResponse">
            <summary>
            Response to <c>EchoRequest</c> message.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetColorZones">
            <summary>
            GetColorZones is used to request the zone colors for a range of zones.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetExtendedColorZones">
            <summary>
            This message will ask the device to return a StateExtendedColorZones containing all of it's colors.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetGroup">
            <summary>
            Ask the bulb to return its group membership information.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetHostFirmware">
            <summary>
            Gets Host MCU firmware information.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetHostInfo">
            <summary>
            Get Host MCU information.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetInfo">
            <summary>
            Get run-time information.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetLabel">
            <summary>
            Get device label.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetLocation">
            <summary>
            Ask the bulb to return its location information.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetPower">
            <summary>
            Get device power level.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetService">
            <summary>
            Sent by a client to acquire responses from all devices on the local network.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetVersion">
            <summary>
            Get the hardware version.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetWifiFirmware">
            <summary>
            Get Wifi subsystem firmware.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.GetWifiInfo">
            <summary>
            Get Wifi subsystem information.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightGet">
            <summary>
            Sent by a client to obtain the light state.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightGetInfrared">
            <summary>
            Gets the current maximum power level of the Infrared channel.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightGetPower">
            <summary>
            Sent by a client to obtain the power level.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightSetColor">
            <summary>
            Sent by a client to change the light state.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightSetInfrared">
            <summary>
            Send this message to alter the current maximum brightness for the infrared channel.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightSetPower">
            <summary>
            Sent by a client to change the light power level.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightSetWaveform">
            <summary>
            Apply an effect to the bulb.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightSetWaveformOptional">
            <summary>
            Optionally set effect parameters. Same as SetWaveform but allows some parameters to be set from the current value on device.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightState">
            <summary>
            Sent by a device to provide the current light state.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightStateInfrared">
            <summary>
            This message is returned from a GetInfrared message. It indicates the current maximum setting for the infrared channel.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.LightStatePower">
            <summary>
            Sent by a device to provide the current power level.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.SetExtendedColorZones">
            <summary>
            This messages lets you change all the zones on your device in one message.
            </summary>
        </member>
        <member name="T:AydenIO.Lifx.Messages.SetGroup">
            <summary>
            Set the device group.
            </summary>
        </member>
    </members>
</doc>
